{"version":3,"sources":["../../src/models/song.js"],"names":["Song","sequelize","define","id","type","Sequelize","INTEGER","UNSIGNED","autoIncrement","primaryKey","name","STRING","allowNull","duration","size","defaultValue","albumId","references","model","key","onDelete","onUpdate","categoryId","status","ENUM","createdBy","updatedBy","timestamps","insertSong","data","transaction","artistIds","conditions","console","log","song","findOrCreate","where","defaults","artistSongs","map","artistId","songId","ArtistSong","bulkCreate","commit","error","rollback"],"mappings":";;;;;;;AAAA;;AAGA;;;;;;AACA;;AAEA,MAAMA,OAAOC,+BAAUC,MAAV,CAAiB,OAAjB,EAA0B;AACrCC,MAAI,EAAEC,MAAMC,+BAAUC,OAAV,CAAkBC,QAA1B,EAAoCC,eAAe,IAAnD,EAAyDC,YAAY,IAArE,EADiC;AAErCC,QAAM,EAACN,MAAMC,+BAAUM,MAAjB,EAAyBC,WAAW,KAApC,EAF+B;AAGrCC,YAAU,EAACT,MAAMC,+BAAUM,MAAV,CAAiB,EAAjB,CAAP,EAH2B;AAIrCG,QAAM,EAACV,MAAMC,+BAAUC,OAAV,CAAkB,EAAlB,CAAP,EAA8BS,cAAc,CAA5C,EAJ+B;AAKrCC,WAAS,EAACZ,MAAMC,+BAAUC,OAAV,CAAkBC,QAAzB,EAAmCU,YAAY;AACtDC,aAAO,QAD+C;AAEtDC,WAAK;AAFiD,KAA/C,EAGNC,UAAU,UAHJ,EAGgBC,UAAU,SAH1B,EAL4B;AASrCC,cAAY,EAAClB,MAAMC,+BAAUC,OAAV,CAAkBC,QAAzB,EAAmCU,YAAY;AACzDC,aAAO,YADkD;AAEzDC,WAAK;AAFoD,KAA/C,EAGTC,UAAU,UAHD,EAGaC,UAAU,SAHvB,EATyB;AAarCE,UAAQ,EAACnB,MAAMC,+BAAUmB,IAAV,CAAe,QAAf,EAAyB,UAAzB,EAAqC,SAArC,CAAP,EAAwDT,cAAc,QAAtE,EAb6B;AAcrCU,aAAW,EAACrB,MAAMC,+BAAUC,OAAV,CAAkBC,QAAzB,EAAmCK,WAAW,KAA9C,EAd0B;AAerCc,aAAW,EAACtB,MAAMC,+BAAUC,OAAV,CAAkBC,QAAzB,EAAmCK,WAAW,KAA9C;AAf0B,CAA1B,EAgBV,EAACe,YAAY,IAAb,EAhBU,CAAb;AALA;AACA;AAsBO,MAAMC,kCAAa,MAAOC,IAAP,IAAgB;AACxC,QAAMC,cAAc,MAAM7B,+BAAU6B,WAAV,EAA1B;AACA,MAAG;AACD,UAAM,EAACC,SAAD,EAAYlB,QAAZ,EAAsBC,IAAtB,EAA4BJ,IAA5B,KAAoCmB,IAA1C;AACA,UAAMG,aAAa,EAACtB,IAAD,EAAOG,QAAP,EAAiBC,IAAjB,EAAnB;AACAmB,YAAQC,GAAR,CAAYL,IAAZ;AACA;AACA,UAAM,CAACM,IAAD,IAAS,MAAMnC,KAAKoC,YAAL,CAAkB,EAACC,OAAOL,UAAR,EAAoBM,UAAUT,IAA9B,EAAoCC,WAApC,EAAlB,CAArB;AACA;AACA,UAAMS,cAAcR,UAAUS,GAAV,CAAcC,aAAa;AAC7CC,cAAQP,KAAKhC,EADgC;AAE7CsC,gBAAUA;AAFmC,KAAb,CAAd,CAApB;AAIA;AACA,UAAME,qBAAWC,UAAX,CAAsBL,WAAtB,EAAmC,EAACT,WAAD,EAAnC,CAAN;AACA;AACAA,gBAAYe,MAAZ;AACA;AACA;AACA,WAAOV,IAAP;AACD,GAlBD,CAkBE,OAAMW,KAAN,EAAY;AACZhB,gBAAYiB,QAAZ;AACA,UAAMD,KAAN;AACD;AACF,CAxBM;;kBA0BQ9C,I","file":"song.js","sourcesContent":["import {sequelize, Sequelize} from '../common/sequelize-connection';\n// import Album from './album';\n// import Category from './category';\nimport ArtistSong from './artist-song';\n//import Playlist from './playlist';\n\nconst Song = sequelize.define('songs', {\n  id: { type: Sequelize.INTEGER.UNSIGNED, autoIncrement: true, primaryKey: true},\n  name: {type: Sequelize.STRING, allowNull: false},\n  duration: {type: Sequelize.STRING(10)},\n  size: {type: Sequelize.INTEGER(11), defaultValue: 0},\n  albumId: {type: Sequelize.INTEGER.UNSIGNED, references: {\n    model: 'albums',\n    key: 'id'\n  }, onDelete: 'SET NULL', onUpdate: 'CASCADE'},\n  categoryId: {type: Sequelize.INTEGER.UNSIGNED, references: {\n    model: 'categories',\n    key: 'id'\n  }, onDelete: 'SET NULL', onUpdate: 'CASCADE'},\n  status: {type: Sequelize.ENUM('active', 'inactive', 'deleted'), defaultValue: 'active'},\n  createdBy: {type: Sequelize.INTEGER.UNSIGNED, allowNull: false},\n  updatedBy: {type: Sequelize.INTEGER.UNSIGNED, allowNull: false}\n}, {timestamps: true});\n\nexport const insertSong = async (data) => {\n  const transaction = await sequelize.transaction();\n  try{\n    const {artistIds, duration, size, name} = data;\n    const conditions = {name, duration, size};\n    console.log(data);\n    //create song with that transaction\n    const [song] = await Song.findOrCreate({where: conditions, defaults: data, transaction});\n    //map into one object => (songId, artistId)\n    const artistSongs = artistIds.map(artistId => ({\n      songId: song.id,\n      artistId: artistId\n    }));\n    //insert many into ArtistSong\n    await ArtistSong.bulkCreate(artistSongs, {transaction});\n    //we need to commit data\n    transaction.commit();\n    //End transaction\n    ////////////////////\n    return song;\n  } catch(error){\n    transaction.rollback();\n    throw error;\n  }\n};\n\nexport default Song;\n"]}