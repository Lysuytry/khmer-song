{"version":3,"sources":["../../src/models/song.js"],"names":["Song","sequelize","define","id","type","Sequelize","INTEGER","UNSIGNED","autoIncrement","primaryKey","name","STRING","allowNull","duration","size","defaultValue","albumId","references","model","key","onDelete","onUpdate","categoryId","status","ENUM","createdBy","updatedBy","timestamps","insertSong","data","transaction","artistIds","conditions","song","findOrCreate","where","defaults","artistSongs","map","artistId","songId","ArtistSong","bulkCreate","commit","error","rollback","updateSong","body","fliterArtistSong","destroy","Promise","all","update","getSongArtistCategory","limit","offset","singerId","fliterSingerId","fliterSingerName","fliterSingerType","fliterAlbumId","preString","path","join","__dirname","preStringCount","queryString","queryStringCount","replacementSong","singerType","limitValue","offsetValue","songs","count","query","replacements","QueryTypes","SELECT","Error"],"mappings":"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","file":"song.js","sourcesContent":["//import Playlist from './playlist';\nimport path from 'path';\nimport format from 'string-template';\nimport { Sequelize, sequelize } from '../common/sequelize-connection';\nimport { readFile } from '../common/syncFile';\n// import Album from './album';\n// import Category from './category';\nimport ArtistSong from './artist-song';\n\nconst Song = sequelize.define(\n  'songs',\n  {\n    id: { type: Sequelize.INTEGER.UNSIGNED, autoIncrement: true, primaryKey: true },\n    name: { type: Sequelize.STRING, allowNull: false },\n    duration: { type: Sequelize.STRING(10) },\n    size: { type: Sequelize.INTEGER(11), defaultValue: 0 },\n    albumId: {\n      type: Sequelize.INTEGER.UNSIGNED,\n      references: {\n        model: 'albums',\n        key: 'id'\n      },\n      onDelete: 'SET NULL',\n      onUpdate: 'CASCADE'\n    },\n    categoryId: {\n      type: Sequelize.INTEGER.UNSIGNED,\n      references: {\n        model: 'categories',\n        key: 'id'\n      },\n      onDelete: 'SET NULL',\n      onUpdate: 'CASCADE'\n    },\n    status: { type: Sequelize.ENUM('active', 'inactive', 'deleted'), defaultValue: 'active' },\n    createdBy: { type: Sequelize.INTEGER.UNSIGNED, allowNull: false },\n    updatedBy: { type: Sequelize.INTEGER.UNSIGNED, allowNull: false }\n  },\n  { timestamps: true }\n);\n\nexport const insertSong = async data => {\n  const transaction = await sequelize.transaction();\n  try {\n    const { artistIds, duration, size, name } = data;\n    const conditions = { name, duration, size };\n    //console.log(data);\n    //create song with that transaction\n    const [song] = await Song.findOrCreate({ where: conditions, defaults: data, transaction });\n    //map into one object => (songId, artistId)\n    const artistSongs = artistIds.map(artistId => ({\n      songId: song.id,\n      artistId: artistId\n    }));\n    //insert many into ArtistSong\n    await ArtistSong.bulkCreate(artistSongs, { transaction });\n    //we need to commit data\n    transaction.commit();\n    //End transaction\n    ////////////////////\n    return song;\n  } catch (error) {\n    transaction.rollback();\n    throw error;\n  }\n};\n\nexport const updateSong = async body => {\n  const transaction = await sequelize.transaction();\n  try {\n    const { data, id, artistIds } = body;\n    let artistSongs;\n    let fliterArtistSong = {};\n    //check if they provide artistIds to update or not\n    if (artistIds) {\n      artistSongs = artistIds.map(artistId => ({\n        songId: id,\n        artistId: artistId\n      }));\n      fliterArtistSong = ArtistSong.destroy({ where: { songId: id }, transaction });\n    }\n    //if have update => 2 process otherwise only once process\n    const [song] = await Promise.all([\n      Song.update(data, { where: { id, status: 'active' }, transaction }),\n      fliterArtistSong\n    ]);\n    //check again\n    if (artistIds) await ArtistSong.bulkCreate(artistSongs, { transaction });\n    transaction.commit();\n    return song;\n  } catch (error) {\n    transaction.rollback();\n    throw error;\n  }\n};\n\nexport const getSongArtistCategory = async data => {\n  try {\n    const { limit, offset, name, singerId, type, albumId } = data;\n    const fliterSingerId = singerId ? `AND singerId = :singerId` : ``;\n    const fliterSingerName = name ? `AND (A.name LIKE :name OR S.name LIKE :name)` : ``;\n    const fliterSingerType = type ? `AND A.type = :singerType` : ``;\n    const fliterAlbumId = albumId ? `AND S.albumId = :albumId` : ``;\n    const preString = readFile(path.join(__dirname, '../../src/query/song/getSongArtistCategory.sql'));\n    const preStringCount = readFile(path.join(__dirname, '../../src/query/song/countAllSongArtistCategory.sql'));\n    const queryString = format(preString, { fliterSingerId, fliterSingerName, fliterSingerType, fliterAlbumId });\n    const queryStringCount = format(preStringCount, {\n      fliterSingerId,\n      fliterSingerName,\n      fliterSingerType,\n      fliterAlbumId\n    });\n    const replacementSong = {\n      name: `%${name}%`,\n      singerType: type,\n      albumId: albumId,\n      limitValue: limit,\n      offsetValue: offset\n    };\n    const [songs, [count]] = await Promise.all([\n      sequelize.query(queryString, {\n        replacements: replacementSong,\n        type: sequelize.QueryTypes.SELECT\n      }),\n      sequelize.query(queryStringCount, {\n        replacements: replacementSong,\n        type: sequelize.QueryTypes.SELECT\n      })\n    ]);\n    return { songs, ...count };\n  } catch (error) {\n    throw new Error('Error');\n  }\n};\n\nexport default Song;\n"]}