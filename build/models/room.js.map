{"version":3,"sources":["../../src/models/room.js"],"names":["Room","sequelize","define","id","type","Sequelize","CHAR","defaultValue","UUIDV4","primaryKey","name","TEXT","allowNull","status","ENUM","createdBy","INTEGER","UNSIGNED","updatedBy","timestamps","createRoomAndUser","data","transaction","friendId","room","create","roomData","userId","roomId","RoomUser","bulkCreate","commit","error","rollback","Error","message"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,OAAOC,+BAAUC,MAAV,CACX,OADW,EAEX;AACEC,MAAI,EAAEC,MAAMC,+BAAUC,IAAV,CAAe,EAAf,CAAR,EAA4BC,cAAcF,+BAAUG,MAApD,EAA4DC,YAAY,IAAxE,EADN;AAEEC,QAAM,EAAEN,MAAMC,+BAAUM,IAAlB,EAAwBC,WAAW,IAAnC,EAFR;AAGEC,UAAQ,EAAET,MAAMC,+BAAUS,IAAV,CAAe,QAAf,EAAyB,UAAzB,EAAqC,SAArC,CAAR,EAAyDP,cAAc,QAAvE,EAHV;AAIEQ,aAAW,EAAEX,MAAMC,+BAAUW,OAAV,CAAkBC,QAA1B,EAJb;AAKEC,aAAW,EAAEd,MAAMC,+BAAUW,OAAV,CAAkBC,QAA1B;AALb,CAFW,EASX,EAAEE,YAAY,IAAd,EATW,CAAb;;AAYO,MAAMC,gDAAoB,MAAMC,IAAN,IAAc;AAC7C,QAAMC,cAAc,MAAMrB,+BAAUqB,WAAV,EAA1B;AACA,MAAI;AACF,UAAM,EAAEnB,EAAF,EAAMe,SAAN,EAAiBH,SAAjB,EAA4BL,IAA5B,EAAkCa,QAAlC,KAA+CF,IAArD;AACA,UAAMG,OAAO,MAAMxB,KAAKyB,MAAL,CAAY,EAAEf,IAAF,EAAQQ,SAAR,EAAmBH,SAAnB,EAAZ,EAA4C,EAAEO,WAAF,EAA5C,CAAnB;AACA,UAAMI,WAAW,CAAC,EAAEC,QAAQxB,EAAV,EAAcyB,QAAQJ,KAAKrB,EAA3B,EAAD,EAAkC,EAAEwB,QAAQJ,QAAV,EAAoBK,QAAQJ,KAAKrB,EAAjC,EAAlC,CAAjB;AACA,UAAM0B,mBAASC,UAAT,CAAoBJ,QAApB,EAA8B,EAACJ,WAAD,EAA9B,CAAN;AACAA,gBAAYS,MAAZ;AACA,WAAOP,IAAP;AACD,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACdV,gBAAYW,QAAZ;AACA,WAAO,IAAIC,KAAJ,CAAUF,MAAMG,OAAhB,CAAP;AACD;AACF,CAbM;;kBAeQnC,I","file":"room.js","sourcesContent":["import { Sequelize, sequelize } from '../common/sequelize-connection';\nimport RoomUser from '../models/room-user';\n\nconst Room = sequelize.define(\n  'rooms',\n  {\n    id: { type: Sequelize.CHAR(36), defaultValue: Sequelize.UUIDV4, primaryKey: true },\n    name: { type: Sequelize.TEXT, allowNull: true },\n    status: { type: Sequelize.ENUM('active', 'inactive', 'deleted'), defaultValue: 'active' },\n    createdBy: { type: Sequelize.INTEGER.UNSIGNED },\n    updatedBy: { type: Sequelize.INTEGER.UNSIGNED }\n  },\n  { timestamps: true }\n);\n\nexport const createRoomAndUser = async data => {\n  const transaction = await sequelize.transaction();\n  try {\n    const { id, updatedBy, createdBy, name, friendId } = data;\n    const room = await Room.create({ name, updatedBy, createdBy }, { transaction });\n    const roomData = [{ userId: id, roomId: room.id }, { userId: friendId, roomId: room.id }];\n    await RoomUser.bulkCreate(roomData, {transaction});\n    transaction.commit();\n    return room;\n  } catch (error) {\n    transaction.rollback();\n    return new Error(error.message);\n  }\n};\n\nexport default Room;\n"]}