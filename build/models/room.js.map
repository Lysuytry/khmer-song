{"version":3,"sources":["../../src/models/room.js"],"names":["Room","sequelize","define","id","type","Sequelize","CHAR","defaultValue","UUIDV4","primaryKey","name","TEXT","allowNull","status","ENUM","createdBy","INTEGER","UNSIGNED","updatedBy","timestamps","findAllRoom","data","limit","offset","preString","path","join","__dirname","countString","replacements","queryString","queryCount","rooms","count","Promise","all","query","QueryTypes","SELECT","error","createRoomAndUser","transaction","friendIds","push","room","create","roomData","map","friend","userId","roomId","RoomUser","bulkCreate","commit","rollback","Error","message","addUser"],"mappings":"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","file":"room.js","sourcesContent":["import { Sequelize, sequelize } from '../common/sequelize-connection';\nimport RoomUser from '../models/room-user';\nimport { readFile } from '../common/syncFile';\nimport path from 'path';\nimport format from 'string-template';\n\nconst Room = sequelize.define(\n  'rooms',\n  {\n    id: { type: Sequelize.CHAR(36), defaultValue: Sequelize.UUIDV4, primaryKey: true },\n    name: { type: Sequelize.TEXT, allowNull: true },\n    status: { type: Sequelize.ENUM('active', 'inactive', 'deleted'), defaultValue: 'active' },\n    createdBy: { type: Sequelize.INTEGER.UNSIGNED },\n    updatedBy: { type: Sequelize.INTEGER.UNSIGNED }\n  },\n  { timestamps: true }\n);\n\nexport const findAllRoom = async data => {\n  try {\n    const {id, limit, offset} = data;\n    const preString = readFile(path.join(__dirname, '../../src/query/room/get-room-user-status.sql'));\n    const countString = readFile(path.join(__dirname, '../../src/query/room/count-room-user-status.sql'));\n    const replacements = { id , limit, offset};\n    const queryString = format(preString);\n    const queryCount = format(countString);\n    const [rooms, [count]] = await Promise.all([\n      sequelize.query(queryString, { replacements, type: sequelize.QueryTypes.SELECT }),\n      sequelize.query(queryCount, { replacements, type: sequelize.QueryTypes.SELECT })\n    ]);\n    return { rooms, count };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const createRoomAndUser = async data => {\n  const transaction = await sequelize.transaction();\n  try {\n    const { name, updatedBy, createdBy, id, friendIds } = data;\n    friendIds.push(id);\n    //create room & no worry how to redundancy room\n    const room = await Room.create({ name, updatedBy, createdBy }, { transaction });\n    //bind for inputting into RoomUser\n    const roomData = friendIds.map(friend => ({\n      userId: friend,\n      roomId: room.id\n    }));\n    //bulk input\n    await RoomUser.bulkCreate(roomData, { transaction });\n\n    transaction.commit();\n    return room;\n  } catch (error) {\n    transaction.rollback();\n    return new Error(error.message);\n  }\n};\n\nexport const addUser = async data => {\n  const transaction = await sequelize.transaction();\n  try {\n    const { roomId, friendIds } = data;\n    const roomData = friendIds.map(friend => ({\n      userId: friend,\n      roomId\n    }));\n    await RoomUser.bulkCreate(roomData, { transaction });\n    transaction.commit();\n  } catch (error) {\n    transaction.rollback();\n    return error;\n  }\n};\n\nexport default Room;\n"]}