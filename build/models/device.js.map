{"version":3,"sources":["../../src/models/device.js"],"names":["Device","sequelize","define","id","type","Sequelize","INTEGER","UNSIGNED","primaryKey","userId","allowNull","name","STRING","registrationToken","CHAR","ENUM","subscribed","defaultValue","tags","TEXT","timestamps","getAllDevices","data","attribute","limit","offset","filterUserId","filterType","filterSubscribe","filterTags","Op","in","filterAttributes","attributes","filterWhere","devices","findAll","raw","where","error"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,SAASC,+BAAUC,MAAV,CACb,SADa,EAEb;AACEC,MAAI,EAAEC,MAAMC,+BAAUC,OAAV,CAAkBC,QAA1B,EAAoCC,YAAY,IAAhD,EADN;AAEEC,UAAQ,EAAEL,MAAMC,+BAAUC,OAAV,CAAkBC,QAA1B,EAAoCG,WAAW,KAA/C,EAFV;AAGEC,QAAM,EAAEP,MAAMC,+BAAUO,MAAV,CAAiB,GAAjB,CAAR,EAA+BF,WAAW,KAA1C,EAHR;AAIEG,qBAAmB,EAAET,MAAMC,+BAAUS,IAAV,CAAe,EAAf,CAAR,EAA4BJ,WAAW,KAAvC,EAJrB;AAKEN,QAAM,EAAEA,MAAMC,+BAAUU,IAAV,CAAe,SAAf,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,OAAxC,EAAiD,QAAjD,CAAR,EAAoEL,WAAW,KAA/E,EALR;AAMEM,cAAY,EAAEZ,MAAMC,+BAAUU,IAAV,CAAe,YAAf,EAA6B,cAA7B,CAAR,EAAsDE,cAAc,cAApE,EANd;AAOEC,QAAM,EAAEd,MAAMC,+BAAUc,IAAlB,EAAwBT,WAAW,IAAnC;AAPR,CAFa,EAWb,EAAEU,YAAY,IAAd,EAXa,CAAf;;AAcO,MAAMC,wCAAgB,MAAMC,IAAN,IAAc;AACzC,MAAI;AACF,UAAM,EAAEb,MAAF,EAAUL,IAAV,EAAgBc,IAAhB,EAAsBF,UAAtB,EAAkCO,SAAlC,EAA6CC,KAA7C,EAAoDC,MAApD,KAA+DH,IAArE;;AAEA,UAAMI,eAAejB,SAAS,EAAEA,MAAF,EAAT,GAAsB,EAA3C;AACA,UAAMkB,aAAavB,OAAO,EAAEA,IAAF,EAAP,GAAkB,EAArC;AACA,UAAMwB,kBAAkBZ,aAAa,EAAEA,UAAF,EAAb,GAA8B,EAAtD;AACA,UAAMa,aAAaX,OAAO,EAAEA,MAAM,EAAE,CAACY,wBAAGC,EAAJ,GAASb,IAAX,EAAR,EAAP,GAAqC,EAAxD;AACA,UAAMc,mBAAmBT,YAAY,EAAEU,YAAYV,SAAd,EAAZ,GAAwC,EAAjE;AACA,UAAMW,2BAAmBR,YAAnB,EAAoCE,eAApC,EAAwDC,UAAxD,EAAuEF,UAAvE,CAAN;;AAEA,UAAMQ,UAAU,MAAMnC,OAAOoC,OAAP,YAAiBC,KAAK,IAAtB,IAA+BL,gBAA/B,IAAiDM,OAAOJ,WAAxD,EAAqEV,KAArE,EAA4EC,MAA5E,IAAtB;;AAEA,WAAOU,OAAP;AACD,GAbD,CAaE,OAAOI,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAjBM;;kBAmBQvC,M","file":"device.js","sourcesContent":["import { Sequelize, sequelize, Op } from '../common/sequelize-connection';\n\nconst Device = sequelize.define(\n  'devices',\n  {\n    id: { type: Sequelize.INTEGER.UNSIGNED, primaryKey: true },\n    userId: { type: Sequelize.INTEGER.UNSIGNED, allowNull: false },\n    name: { type: Sequelize.STRING(100), allowNull: false },\n    registrationToken: { type: Sequelize.CHAR(36), allowNull: false },\n    type: { type: Sequelize.ENUM('android', 'ios', 'web', 'admin', 'window'), allowNull: false },\n    subscribed: { type: Sequelize.ENUM('subscribed', 'unsubscribed'), defaultValue: 'unsubscribed' },\n    tags: { type: Sequelize.TEXT, allowNull: true }\n  },\n  { timestamps: true }\n);\n\nexport const getAllDevices = async data => {\n  try {\n    const { userId, type, tags, subscribed, attribute, limit, offset } = data;\n\n    const filterUserId = userId ? { userId } : {};\n    const filterType = type ? { type } : {};\n    const filterSubscribe = subscribed ? { subscribed } : {};\n    const filterTags = tags ? { tags: { [Op.in]: tags } } : {};\n    const filterAttributes = attribute ? { attributes: attribute } : {};\n    const filterWhere = { ...filterUserId, ...filterSubscribe, ...filterTags, ...filterType };\n\n    const devices = await Device.findAll({ raw: true, ...filterAttributes, where: filterWhere, limit, offset });\n\n    return devices;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default Device;\n"]}