{"version":3,"sources":["../../src/models/playlist.js"],"names":["Playlist","sequelize","define","id","type","Sequelize","CHAR","defaultValue","UUIDV4","primaryKey","name","STRING","allowNull","userId","INTEGER","UNSIGNED","references","model","key","onDelete","onUpdate","timestamps","getSongByPlaylistId","data","limit","offset","pathQuery","Path","join","__dirname","pathCount","querySong","countSong","replacementsQuery","replacements","limitValue","offsetValue","QueryTypes","SELECT","replacementsCount","songs","count","Promise","all","query","error","Error","message"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;AACA;;AAEA,MAAMA,WAAWC,+BAAUC,MAAV,CACf,UADe,EAEf;AACEC,MAAI,EAAEC,MAAMC,+BAAUC,IAAV,CAAe,EAAf,CAAR,EAA4BC,cAAcF,+BAAUG,MAApD,EAA4DC,YAAY,IAAxE,EADN;AAEEC,QAAM,EAAEN,MAAMC,+BAAUM,MAAV,CAAiB,EAAjB,CAAR,EAA8BC,WAAW,KAAzC,EAFR;AAGEC,UAAQ;AACNT,UAAMC,+BAAUS,OAAV,CAAkBC,QADlB;AAENC,gBAAY;AACVC,aAAO,OADG;AAEVC,WAAK;AAFK,KAFN;AAMNC,cAAU,SANJ;AAONC,cAAU;AAPJ;AAHV,CAFe,EAef,EAAEC,YAAY,IAAd,EAfe,CAAjB;;AAkBO,MAAMC,oDAAsB,MAAMC,IAAN,IAAc;AAC/C,MAAI;AACF,UAAM,EAAEpB,EAAF,EAAMqB,KAAN,EAAaC,MAAb,EAAqBZ,MAArB,KAAgCU,IAAtC;AACA,UAAMG,YAAYC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,mDAArB,CAAlB;AACA,UAAMC,YAAYH,eAAKC,IAAL,CAAUC,SAAV,EAAqB,qDAArB,CAAlB;AACA,UAAME,YAAY,wBAASL,SAAT,CAAlB;AACA,UAAMM,YAAY,wBAASF,SAAT,CAAlB;AACA,UAAMG,oBAAoB;AACxBC,oBAAc,EAAE/B,IAAIA,EAAN,EAAUU,QAAQA,MAAlB,EAA0BsB,YAAYX,KAAtC,EAA6CY,aAAaX,MAA1D,EADU;AAExBrB,YAAMH,+BAAUoC,UAAV,CAAqBC;AAFH,KAA1B;AAIA,UAAMC,oBAAoB,EAAEL,cAAc,EAAE/B,IAAIA,EAAN,EAAhB,EAA4BC,MAAMH,+BAAUoC,UAAV,CAAqBC,MAAvD,EAA1B;AACA,UAAM,CAACE,KAAD,EAAQ,CAACC,KAAD,CAAR,IAAmB,MAAMC,QAAQC,GAAR,CAAY,CACzC1C,+BAAU2C,KAAV,CAAgBb,SAAhB,EAA2BE,iBAA3B,CADyC,EAEzChC,+BAAU2C,KAAV,CAAgBZ,SAAhB,EAA2BO,iBAA3B,CAFyC,CAAZ,CAA/B;AAIA,sBAASC,KAAT,IAAmBC,KAAnB;AACD,GAhBD,CAgBE,OAAOI,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAUD,MAAME,OAAhB,CAAN;AACD;AACF,CApBM;;kBAsBQ/C,Q","file":"playlist.js","sourcesContent":["import { Sequelize, sequelize } from '../common/sequelize-connection';\nimport Path from 'path';\nimport { readFile } from '../common/syncFile';\n//import User from './user';\n//import Song from './song';\n\nconst Playlist = sequelize.define(\n  'playists',\n  {\n    id: { type: Sequelize.CHAR(36), defaultValue: Sequelize.UUIDV4, primaryKey: true },\n    name: { type: Sequelize.STRING(70), allowNull: false },\n    userId: {\n      type: Sequelize.INTEGER.UNSIGNED,\n      references: {\n        model: 'users',\n        key: 'id'\n      },\n      onDelete: 'CASCADE',\n      onUpdate: 'CASCADE'\n    }\n  },\n  { timestamps: true }\n);\n\nexport const getSongByPlaylistId = async data => {\n  try {\n    const { id, limit, offset, userId } = data;\n    const pathQuery = Path.join(__dirname, '../../src/query/playlist/getAllSongInPlaylist.sql');\n    const pathCount = Path.join(__dirname, '../../src/query/playlist/countAllSongInPlaylist.sql');\n    const querySong = readFile(pathQuery);\n    const countSong = readFile(pathCount);\n    const replacementsQuery = {\n      replacements: { id: id, userId: userId, limitValue: limit, offsetValue: offset },\n      type: sequelize.QueryTypes.SELECT\n    };\n    const replacementsCount = { replacements: { id: id }, type: sequelize.QueryTypes.SELECT };\n    const [songs, [count]] = await Promise.all([\n      sequelize.query(querySong, replacementsQuery),\n      sequelize.query(countSong, replacementsCount)\n    ]);\n    return { songs, ...count };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport default Playlist;\n"]}