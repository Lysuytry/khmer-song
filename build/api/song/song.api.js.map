{"version":3,"sources":["../../../src/api/song/song.api.js"],"names":["getSongList","req","res","limit","offset","query","songs","count","success","error","fail","message","getSongById","id","params","song","artistIds","Promise","all","Song","findOne","raw","where","status","ArtistSong","findAll","attributes","songId","albumId","categoryId","ids","map","artist","artistId","albumAttribute","artistAttribute","categoryAttribute","productionAttribute","album","category","artists","Album","Category","Artist","Op","in","production","Production","productionId"],"mappings":"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","file":"song.api.js","sourcesContent":["import Song, { getSongArtistCategory } from '../../models/song';\nimport ArtistSong from '../../models/artist-song';\nimport Artist from '../../models/artist';\nimport { Op } from '../../common/sequelize-connection';\nimport Category from '../../models/category';\nimport Album from '../../models/album';\nimport Production from '../../models/production';\n\nexport const getSongList = async (req, res) => {\n  try {\n    const { limit, offset } = req.query;\n    const { songs, count } = await getSongArtistCategory(req.query);\n    res.success(songs, { count, limit, offset });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    //check song in songs & artist-song\n    const [song, artistIds] = await Promise.all([\n      Song.findOne({ raw: true, where: { id, status: 'active' } }),\n      ArtistSong.findAll({ raw: true, attributes: ['artistId'], where: { songId: id } })\n    ]);\n    if (!song) res.fail('Song Id is invalid.');\n    const { albumId, categoryId } = song;\n    const ids = artistIds.map(artist => {\n      return artist.artistId;\n    });\n    const albumAttribute = [['name', 'albumName'], ['id', 'albumId'], ['image', 'albumImage'], 'productionId'];\n    const artistAttribute = [\n      ['name', 'artistName'],\n      ['image', 'artistImage'],\n      ['type', 'artistType'],\n      ['id', 'artistId']\n    ];\n    const categoryAttribute = [['name', 'category'], ['id', 'categoryId']];\n    const productionAttribute = [['name', 'productionName'], ['logo', 'productionLogo'], ['id', 'productionId']];\n    //if have => cate..Id, album..Id, artist in [artistIds]\n    const [album, category, artists] = await Promise.all([\n      Album.findOne({ raw: true, attributes: albumAttribute, where: { id: albumId } }),\n      Category.findOne({ raw: true, attributes: categoryAttribute, where: { id: categoryId } }),\n      Artist.findAll({ raw: true, attributes: artistAttribute, where: { id: { [Op.in]: ids } } })\n    ]);\n    //get productionId from album => productions\n    const production = await Production.findOne({\n      raw: true,\n      attributes: productionAttribute,\n      where: { id: album.productionId }\n    });\n    res.success({ ...song, ...category, ...album, ...production, artists });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}