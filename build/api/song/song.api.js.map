{"version":3,"sources":["../../../src/api/song/song.api.js"],"names":["getSongList","req","res","success","error","fail","message","getSongById","id","params","song","artistIds","Promise","all","Song","findOne","where","status","ArtistSong","findAll","raw","attributes","songId","albumId","categoryId","ids","map","artist","artistId","album","category","artists","Album","Category","Artist","Op","in","production","Production","productionId"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,MAAMA,oCAAc,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAI;AACFA,QAAIC,OAAJ;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdF,QAAIG,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CANM;;AAQA,MAAMC,oCAAc,OAAON,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAI;AACF,UAAM,EAAEM,EAAF,KAASP,IAAIQ,MAAnB;AACA;AACA,UAAM,CAACC,IAAD,EAAOC,SAAP,IAAoB,MAAMC,QAAQC,GAAR,CAAY,CAC1CC,eAAKC,OAAL,CAAa,EAAEC,OAAO,EAAER,EAAF,EAAMS,QAAQ,QAAd,EAAT,EAAb,CAD0C,EAE1CC,qBAAWC,OAAX,CAAmB,EAAEC,KAAK,IAAP,EAAaC,YAAY,CAAC,UAAD,CAAzB,EAAuCL,OAAO,EAAEM,QAAQd,EAAV,EAA9C,EAAnB,CAF0C,CAAZ,CAAhC;AAIA,QAAI,CAACE,IAAL,EAAWR,IAAIG,IAAJ,CAAS,qBAAT;AACX,UAAM,EAAEkB,OAAF,EAAWC,UAAX,KAA0Bd,IAAhC;AACA,UAAMe,MAAMd,UAAUe,GAAV,CAAcC,UAAU;AAClC,aAAOA,OAAOC,QAAd;AACD,KAFW,CAAZ;AAGA;AACA,UAAM,CAACC,KAAD,EAAQC,QAAR,EAAkBC,OAAlB,IAA6B,MAAMnB,QAAQC,GAAR,CAAY,CACnDmB,gBAAMjB,OAAN,CAAc,EAAEC,OAAO,EAAER,IAAIe,OAAN,EAAT,EAAd,CADmD,EAEnDU,mBAASlB,OAAT,CAAiB,EAAEC,OAAO,EAAER,IAAIgB,UAAN,EAAT,EAAjB,CAFmD,EAGnDU,iBAAOf,OAAP,CAAe,EAAEH,OAAO,EAAER,IAAI,EAAE,CAAC2B,wBAAGC,EAAJ,GAASX,GAAX,EAAN,EAAT,EAAf,CAHmD,CAAZ,CAAzC;AAKA;AACA,UAAMY,aAAa,MAAMC,qBAAWvB,OAAX,CAAmB,EAAEC,OAAO,EAAER,IAAIqB,MAAMU,YAAZ,EAAT,EAAnB,CAAzB;AACArC,QAAIC,OAAJ,CAAY,EAAEO,IAAF,EAAQoB,QAAR,EAAkBD,KAAlB,EAAyBQ,UAAzB,EAAqCN,OAArC,EAAZ;AACD,GArBD,CAqBE,OAAO3B,KAAP,EAAc;AACdF,QAAIG,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CAzBM","file":"song.api.js","sourcesContent":["import Song from '../../models/song';\nimport ArtistSong from '../../models/artist-song';\nimport Artist from '../../models/artist';\nimport { Op } from '../../common/sequelize-connection';\nimport Category from '../../models/category';\nimport Album from '../../models/album';\nimport Production from '../../models/production';\n\nexport const getSongList = async (req, res) => {\n  try {\n    res.success();\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    //check song in songs & artist-song\n    const [song, artistIds] = await Promise.all([\n      Song.findOne({ where: { id, status: 'active' } }),\n      ArtistSong.findAll({ raw: true, attributes: ['artistId'], where: { songId: id } })\n    ]);\n    if (!song) res.fail('Song Id is invalid.');\n    const { albumId, categoryId } = song;\n    const ids = artistIds.map(artist => {\n      return artist.artistId;\n    });\n    //if have => cate..Id, album..Id, artist in [artistIds]\n    const [album, category, artists] = await Promise.all([\n      Album.findOne({ where: { id: albumId } }),\n      Category.findOne({ where: { id: categoryId } }),\n      Artist.findAll({ where: { id: { [Op.in]: ids } } })\n    ]);\n    //get productionId from album => productions\n    const production = await Production.findOne({ where: { id: album.productionId } });\n    res.success({ song, category, album, production, artists });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}