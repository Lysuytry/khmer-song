{"version":3,"sources":["../../../src/api/user/user.api.js"],"names":["getListUser","req","res","limit","offset","status","name","type","att","query","filterName","Op","like","filterType","filterAtt","attributes","role","conditions","rows","count","User","findAndCountAll","raw","where","success","total","error","fail","getListUserId","getMySelf","authUser"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEO,MAAMA,oCAAc,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAI;AACF;AACA,UAAM,EAAEC,KAAF,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,GAArC,KAA6CP,IAAIQ,KAAvD;AACA,UAAMC,aAAaJ,OAAO,EAAEA,MAAM,EAAE,CAACK,wBAAGC,IAAJ,GAAY,IAAGN,IAAK,GAAtB,EAAR,EAAP,GAA8C,EAAjE;AACA,UAAMO,aAAaN,OAAO,EAAEA,IAAF,EAAP,GAAkB,EAArC;AACA,UAAMO,YAAYN,MAAM,EAAEO,YAAY,CAACP,GAAD,CAAd,EAAN,GAA8B,EAAhD;AACA,UAAMQ,OAAO,OAAb;AACA,UAAMC,0BAAkBP,UAAlB,IAA8BM,IAA9B,EAAoCX,MAApC,IAA+CQ,UAA/C,CAAN;AACA,UAAM,EAAEK,IAAF,EAAQC,KAAR,KAAkB,MAAMC,eAAKC,eAAL,YAAsBC,KAAK,IAA3B,IAAoCR,SAApC,IAA+CS,OAAON,UAAtD,EAAkEd,KAAlE,EAAyEC,MAAzE,IAA9B;AACAF,QAAIsB,OAAJ,CAAYN,IAAZ,EAAkB,EAAEO,OAAON,KAAT,EAAgBhB,KAAhB,EAAuBC,MAAvB,EAAlB;AACD,GAVD,CAUE,OAAOsB,KAAP,EAAc;AACdxB,QAAIyB,IAAJ,CAASD,KAAT;AACD;AACF,CAdM;;AAgBA,MAAME,wCAAgB,OAAO3B,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAI;AACF;AACA,UAAM,EAAEC,KAAF,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,IAA/B,KAAwCN,IAAIQ,KAAlD;AACA,UAAMC,aAAaJ,OAAO,EAAEA,MAAM,EAAE,CAACK,wBAAGC,IAAJ,GAAY,IAAGN,IAAK,GAAtB,EAAR,EAAP,GAA8C,EAAjE;AACA,UAAMO,aAAaN,OAAO,EAAEA,IAAF,EAAP,GAAkB,EAArC;AACA,UAAMS,OAAO,OAAb;AACA,UAAMC,0BAAkBP,UAAlB,IAA8BM,IAA9B,EAAoCX,MAApC,IAA+CQ,UAA/C,CAAN;AACA,UAAM,EAAEK,IAAF,EAAQC,KAAR,KAAkB,MAAMC,eAAKC,eAAL,CAAqB;AACjDC,WAAK,IAD4C;AAEjDP,kBAAY,CAAC,IAAD,CAFqC;AAGjDQ,aAAON,UAH0C;AAIjDd,WAJiD;AAKjDC;AALiD,KAArB,CAA9B;AAOAF,QAAIsB,OAAJ,CAAYN,IAAZ,EAAkB,EAAEO,OAAON,KAAT,EAAgBhB,KAAhB,EAAuBC,MAAvB,EAAlB;AACD,GAfD,CAeE,OAAOsB,KAAP,EAAc;AACdxB,QAAIyB,IAAJ,CAASD,KAAT;AACD;AACF,CAnBM;;AAqBA,MAAMG,gCAAY,OAAO5B,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,MAAI;AACF;AACAA,QAAIsB,OAAJ,CAAYvB,IAAI6B,QAAhB;AACD,GAHD,CAGE,OAAOJ,KAAP,EAAc;AACdxB,QAAIyB,IAAJ,CAASD,KAAT;AACD;AACF,CAPM","file":"user.api.js","sourcesContent":["import User from '../../models/user';\nimport { Op } from '../../common/sequelize-connection';\n\nexport const getListUser = async (req, res) => {\n  try {\n    //const {id} = req.authUser;\n    const { limit, offset, status, name, type, att } = req.query;\n    const filterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const filterType = type ? { type } : {};\n    const filterAtt = att ? { attributes: [att] } : {};\n    const role = 'guest';\n    const conditions = { ...filterName, role, status, ...filterType };\n    const { rows, count } = await User.findAndCountAll({raw: true, ...filterAtt, where: conditions, limit, offset });\n    res.success(rows, { total: count, limit, offset });\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getListUserId = async (req, res) => {\n  try {\n    //const {id} = req.authUser;\n    const { limit, offset, status, name, type } = req.query;\n    const filterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const filterType = type ? { type } : {};\n    const role = 'guest';\n    const conditions = { ...filterName, role, status, ...filterType };\n    const { rows, count } = await User.findAndCountAll({\n      raw: true,\n      attributes: ['id'],\n      where: conditions,\n      limit,\n      offset\n    });\n    res.success(rows, { total: count, limit, offset });\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getMySelf = async (req, res) => {\n  try {\n    //const {id} = req.authUser;\n    res.success(req.authUser);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n"]}