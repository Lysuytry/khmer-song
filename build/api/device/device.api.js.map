{"version":3,"sources":["../../../src/api/device/device.api.js"],"names":["registerDevice","req","res","userId","authUser","id","device","Device","create","body","success","error","fail","subscribeDevice","update","subscribed","where","unsubscribeDevice","getListDevice","type","tags","attribute","offset","query","limit","data","devices","getListDeviceByUserId","findOne","getDeviceIdByUserId","userIds"],"mappings":";;;;;;;;;AAAA;;;;;;AAEO,MAAMA,0CAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,UAAMC,SAAS,MAAMC,iBAAOC,MAAP,cAAmBP,IAAIQ,IAAvB,IAA6BN,MAA7B,IAArB;AACAD,QAAIQ,OAAJ,CAAYJ,MAAZ;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CARM;;AAUA,MAAME,4CAAkB,OAAOZ,GAAP,EAAYC,GAAZ,KAAoB;AACjD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA;AACA,UAAME,iBAAOO,MAAP,CAAc,EAAEC,YAAY,YAAd,EAAd,EAA4C,EAAEC,OAAO,EAAEb,MAAF,EAAT,EAA5C,CAAN;AACAD,QAAIQ,OAAJ,CAAY,8BAAZ;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CATM;;AAWA,MAAMM,gDAAoB,OAAOhB,GAAP,EAAYC,GAAZ,KAAoB;AACnD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA;AACA,UAAME,iBAAOO,MAAP,CAAc,EAAEC,YAAY,cAAd,EAAd,EAA8C,EAAEC,OAAO,EAAEb,MAAF,EAAT,EAA9C,CAAN;AACAD,QAAIQ,OAAJ,CAAY,gCAAZ;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CATM;;AAWA,MAAMO,wCAAgB,OAAOjB,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAI;AACF,UAAM,EAAEC,MAAF,EAAUgB,IAAV,EAAgBC,IAAhB,EAAsBL,UAAtB,EAAkCM,SAAlC,EAA6CC,MAA7C,KAAwDrB,IAAIsB,KAAlE;AACA,QAAI,EAAEC,KAAF,KAAYvB,IAAIsB,KAApB;AACAC,YAAQA,QAAQ,GAAR,IAAeA,QAAQ,GAAvB,GAA6B,GAA7B,GAAmCA,KAA3C;;AAEA,UAAMC,OAAO,EAAEtB,MAAF,EAAUgB,IAAV,EAAgBC,IAAhB,EAAsBL,UAAtB,EAAkCM,SAAlC,EAA6CG,KAA7C,EAAoDF,MAApD,EAAb;AACA,UAAMI,UAAU,MAAM,2BAAcD,IAAd,CAAtB;AACAvB,QAAIQ,OAAJ,CAAYgB,OAAZ;AACD,GARD,CAQE,OAAOf,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CAZM;;AAcA,MAAMgB,wDAAwB,OAAO1B,GAAP,EAAYC,GAAZ,KAAoB;AACvD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,UAAMC,SAAS,MAAMC,iBAAOqB,OAAP,CAAe,EAAEZ,OAAO,EAAEb,MAAF,EAAT,EAAf,CAArB;AACAD,QAAIQ,OAAJ,CAAYJ,MAAZ;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CARM;;AAUA,MAAMkB,oDAAsB,OAAO5B,GAAP,EAAYC,GAAZ,KAAoB;AACrD,MAAI;AACF,UAAM,EAAE4B,OAAF,KAAc7B,IAAIQ,IAAxB;AACA,UAAMiB,UAAU,MAAM,0CAA6BI,OAA7B,CAAtB;AACA5B,QAAIQ,OAAJ,CAAYgB,OAAZ;AACD,GAJD,CAIE,OAAOf,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CARM","file":"device.api.js","sourcesContent":["import Device, { getAllDevices, getRegistrationTokenByUserId } from '../../models/device';\n\nexport const registerDevice = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    const device = await Device.create({ ...req.body, userId });\n    res.success(device);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const subscribeDevice = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    //const { deviceId } = req.params;\n    await Device.update({ subscribed: 'subscribed' }, { where: { userId } });\n    res.success('Subscribed for notification.');\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const unsubscribeDevice = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    //const { deviceId } = req.params;\n    await Device.update({ subscribed: 'unsubscribed' }, { where: { userId } });\n    res.success('Unsubscribed for notification.');\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getListDevice = async (req, res) => {\n  try {\n    const { userId, type, tags, subscribed, attribute, offset } = req.query;\n    let { limit } = req.query;\n    limit = limit < 100 || limit > 200 ? 100 : limit;\n\n    const data = { userId, type, tags, subscribed, attribute, limit, offset };\n    const devices = await getAllDevices(data);\n    res.success(devices);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getListDeviceByUserId = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    const device = await Device.findOne({ where: { userId } });\n    res.success(device);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getDeviceIdByUserId = async (req, res) => {\n  try {\n    const { userIds } = req.body;\n    const devices = await getRegistrationTokenByUserId(userIds);\n    res.success(devices);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n"]}