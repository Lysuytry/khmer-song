{"version":3,"sources":["../../../src/api/device/device.api.js"],"names":["registerDevice","req","res","userId","authUser","id","device","Device","create","body","success","error","fail","subscribeDevice","deviceId","query","update","subscribed","where","registrationToken","unsubscribeDevice","getListDevice","type","tags","attribute","offset","limit","data","devices"],"mappings":";;;;;;;;;AAAA;;;;;;AAEO,MAAMA,0CAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,UAAMC,SAAS,MAAMC,iBAAOC,MAAP,cAAmBP,IAAIQ,IAAvB,IAA6BN,MAA7B,IAArB;AACAD,QAAIQ,OAAJ,CAAYJ,MAAZ;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CARM;;AAUA,MAAME,4CAAkB,OAAOZ,GAAP,EAAYC,GAAZ,KAAoB;AACjD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,UAAM,EAAES,QAAF,KAAeb,IAAIc,KAAzB;AACA,UAAMR,iBAAOS,MAAP,CAAc,EAAEC,YAAY,YAAd,EAAd,EAA4C,EAAEC,OAAO,EAAEf,MAAF,EAAUgB,mBAAmBL,QAA7B,EAAT,EAA5C,CAAN;AACAZ,QAAIQ,OAAJ,CAAY,8BAAZ;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CATM;;AAWA,MAAMS,gDAAoB,OAAOnB,GAAP,EAAYC,GAAZ,KAAoB;AACnD,MAAI;AACF,UAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,UAAM,EAAES,QAAF,KAAeb,IAAIc,KAAzB;AACA,UAAMR,iBAAOS,MAAP,CAAc,EAAEC,YAAY,cAAd,EAAd,EAA8C,EAAEC,OAAO,EAAEf,MAAF,EAAUgB,mBAAmBL,QAA7B,EAAT,EAA9C,CAAN;AACAZ,QAAIQ,OAAJ,CAAY,gCAAZ;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CATM;;AAWA,MAAMU,wCAAgB,OAAOpB,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAI;AACF,UAAM,EAAEC,MAAF,EAAUmB,IAAV,EAAgBC,IAAhB,EAAsBN,UAAtB,EAAkCO,SAAlC,EAA6CC,MAA7C,KAAwDxB,IAAIc,KAAlE;AACA,QAAI,EAAEW,KAAF,KAAYzB,IAAIc,KAApB;AACAW,YAAQA,QAAQ,GAAR,IAAeA,QAAQ,GAAvB,GAA6B,GAA7B,GAAmCA,KAA3C;;AAEA,UAAMC,OAAO,EAAExB,MAAF,EAAUmB,IAAV,EAAgBC,IAAhB,EAAsBN,UAAtB,EAAkCO,SAAlC,EAA6CE,KAA7C,EAAoDD,MAApD,EAAb;AACA,UAAMG,UAAU,MAAM,2BAAcD,IAAd,CAAtB;AACAzB,QAAIQ,OAAJ,CAAYkB,OAAZ;AACD,GARD,CAQE,OAAOjB,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,KAAT;AACD;AACF,CAZM","file":"device.api.js","sourcesContent":["import Device, { getAllDevices } from '../../models/device';\n\nexport const registerDevice = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    const device = await Device.create({ ...req.body, userId });\n    res.success(device);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const subscribeDevice = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    const { deviceId } = req.query;\n    await Device.update({ subscribed: 'subscribed' }, { where: { userId, registrationToken: deviceId } });\n    res.success('Subscribed for notification.');\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const unsubscribeDevice = async (req, res) => {\n  try {\n    const userId = req.authUser.id;\n    const { deviceId } = req.query;\n    await Device.update({ subscribed: 'unsubscribed' }, { where: { userId, registrationToken: deviceId } });\n    res.success('Unsubscribed for notification.');\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getListDevice = async (req, res) => {\n  try {\n    const { userId, type, tags, subscribed, attribute, offset } = req.query;\n    let { limit } = req.query;\n    limit = limit < 100 || limit > 200 ? 100 : limit;\n\n    const data = { userId, type, tags, subscribed, attribute, limit, offset };\n    const devices = await getAllDevices(data);\n    res.success(devices);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n"]}