{"version":3,"sources":["../../../src/api/admin/admin.middleware.js"],"names":["checkToken","req","res","next","token","body","query","headers","status","id","role","username","success","updatedBy","createdBy","error","fail","checkTokenForGuest","userId"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEO,MAAMA,kCAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC5C,MAAG;AACD;AACA,UAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,eAAZ,CAAnD;AACA,UAAM,EAACC,MAAD,KAAWP,IAAIK,KAArB;AACA,UAAM,EAACG,EAAD,EAAKC,IAAL,EAAWC,QAAX,KAAuB,sBAAYP,KAAZ,CAA7B;AACA;AACAM,aAAS,OAAT,GAAmBR,IAAIU,OAAJ,CAAY,4BAAZ,CAAnB,GAA+D,sBAAW,EAACH,EAAD,EAAKD,MAAL,EAAaG,QAAb,EAAX,EAAmCT,GAAnC,CAA/D;AACA;AACAD,QAAII,IAAJ,CAASQ,SAAT,GAAqBJ,EAArB;AACAR,QAAII,IAAJ,CAASS,SAAT,GAAqBL,EAArB;AACA;AACAN;AACD,GAZD,CAYE,OAAMY,KAAN,EAAY;AACZb,QAAIc,IAAJ,CAAS,kBAAT;AACD;AACF,CAhBM;;AAkBA,MAAMC,kDAAqB,CAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACpD,MAAG;AACD;AACA,UAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,eAAZ,CAAnD;AACA,UAAM,EAACC,MAAD,KAAWP,IAAIK,KAArB;AACA,UAAM,EAACG,EAAD,EAAKC,IAAL,EAAWC,QAAX,KAAuB,sBAAYP,KAAZ,CAA7B;AACA;AACAM,aAAS,OAAT,GAAmBR,IAAIU,OAAJ,CAAY,4BAAZ,CAAnB,GAA+D,sBAAW,EAACH,EAAD,EAAKD,MAAL,EAAaG,QAAb,EAAX,EAAmCT,GAAnC,CAA/D;AACA;AACAD,QAAII,IAAJ,CAASa,MAAT,GAAkBT,EAAlB;AACA;AACAN;AACD,GAXD,CAWE,OAAMY,KAAN,EAAY;AACZb,QAAIc,IAAJ,CAAS,mBAAT;AACD;AACF,CAfM","file":"admin.middleware.js","sourcesContent":["import {verifyToken} from '../../common/jwt';\nimport {verifyUser} from '../auth/auth.api';\n//verifyUser is a function used for verify user\n\nexport const checkToken = (req, res, next) => {\n  try{\n    //send from everywhere\n    const token = req.body.token || req.query.token || req.headers['authorization'];\n    const {status} = req.query;\n    const {id, role, username} = verifyToken(token);\n    //verify user role username and status = active\n    role === 'guest' ? res.success('Only admin could be access') : verifyUser({id, status, username}, res);\n    //passed verify => next before do that must be assign who will authorize\n    req.body.updatedBy = id;\n    req.body.createdBy = id;\n    //passed to next()\n    next();\n  } catch(error){\n    res.fail('Token is invalid');\n  }\n};\n\nexport const checkTokenForGuest = (req, res, next) => {\n  try{\n    //send from everywhere\n    const token = req.body.token || req.query.token || req.headers['authorization'];\n    const {status} = req.query;\n    const {id, role, username} = verifyToken(token);\n    //verify user role username and status = active\n    role === 'admin' ? res.success('Only Guest could be access') : verifyUser({id, status, username}, res);\n    //passed verify => next before do that must be assign who will authorize\n    req.body.userId = id;\n    //passed to next()\n    next();\n  } catch(error){\n    res.fail('Token is invalid.');\n  }\n};\n"]}