{"version":3,"sources":["../../../src/api/admin/admin.middleware.js"],"names":["checkToken","req","res","next","token","body","query","headers","status","id","role","username","fail","user","authUser","updatedBy","createdBy","error","checkTokenForGuest"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEO,MAAMA,kCAAa,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAClD,MAAG;AACD;AACA,UAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,eAAZ,CAAnD;AACA,UAAM,EAACC,MAAD,KAAWP,IAAIK,KAArB;AACA,UAAM,EAACG,EAAD,EAAKC,IAAL,EAAWC,QAAX,KAAuB,sBAAYP,KAAZ,CAA7B;AACA;AACA,QAAGM,SAAS,OAAZ,EAAqB,OAAOR,IAAIU,IAAJ,CAAS,4BAAT,EAAuC,GAAvC,CAAP;AACrB,UAAMC,OAAO,MAAM,sBAAW,EAACJ,EAAD,EAAKD,MAAL,EAAaG,QAAb,EAAX,EAAmCT,GAAnC,CAAnB;AACA;AACAD,QAAIa,QAAJ,GAAeD,IAAf;AACAZ,QAAIa,QAAJ,CAAaC,SAAb,GAAyBF,KAAKJ,EAA9B;AACAR,QAAIa,QAAJ,CAAaE,SAAb,GAAyBH,KAAKJ,EAA9B;AACA;AACAN;AACD,GAdD,CAcE,OAAMc,KAAN,EAAY;AACZf,QAAIU,IAAJ,CAAS,kBAAT;AACD;AACF,CAlBM;;AAoBA,MAAMM,kDAAqB,OAAOjB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC1D,MAAG;AACD;AACA,UAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,eAAZ,CAAnD;AACA,UAAM,EAACC,MAAD,KAAWP,IAAIK,KAArB;AACA,UAAM,EAACG,EAAD,EAAKC,IAAL,EAAWC,QAAX,KAAuB,sBAAYP,KAAZ,CAA7B;AACA;AACA,QAAGM,SAAS,OAAZ,EAAqB,OAAOR,IAAIU,IAAJ,CAAS,cAAT,EAAyB,GAAzB,CAAP;AACrB,UAAMC,OAAO,sBAAW,EAACJ,EAAD,EAAKD,MAAL,EAAaG,QAAb,EAAX,EAAmCT,GAAnC,CAAb;AACA;AACAD,QAAIa,QAAJ,GAAeD,IAAf;AACAZ,QAAIa,QAAJ,CAAaC,SAAb,GAAyBF,KAAKJ,EAA9B;AACAR,QAAIa,QAAJ,CAAaE,SAAb,GAAyBH,KAAKJ,EAA9B;AACA;AACAN;AACD,GAdD,CAcE,OAAMc,KAAN,EAAY;AACZf,QAAIU,IAAJ,CAAS,mBAAT;AACD;AACF,CAlBM","file":"admin.middleware.js","sourcesContent":["import {verifyToken} from '../../common/jwt';\nimport {verifyUser} from '../auth/auth.api';\n//verifyUser is a function used for verify user\n\nexport const checkToken = async (req, res, next) => {\n  try{\n    //send from everywhere\n    const token = req.body.token || req.query.token || req.headers['authorization'];\n    const {status} = req.query;\n    const {id, role, username} = verifyToken(token);\n    //verify user role username and status = active\n    if(role === 'guest') return res.fail('Only admin could be access', 403);\n    const user = await verifyUser({id, status, username}, res);\n    //passed verify => next before do that must be assign who will authorize\n    req.authUser = user;\n    req.authUser.updatedBy = user.id;\n    req.authUser.createdBy = user.id;\n    //passed to next()\n    next();\n  } catch(error){\n    res.fail('Token is invalid');\n  }\n};\n\nexport const checkTokenForGuest = async (req, res, next) => {\n  try{\n    //send from everywhere\n    const token = req.body.token || req.query.token || req.headers['authorization'];\n    const {status} = req.query;\n    const {id, role, username} = verifyToken(token);\n    //verify user role username and status = active\n    if(role === 'admin') return res.fail('Unauthorized', 403);\n    const user = verifyUser({id, status, username}, res);\n    //passed verify => next before do that must be assign who will authorize\n    req.authUser = user;\n    req.authUser.updatedBy = user.id;\n    req.authUser.createdBy = user.id;\n    //passed to next()\n    next();\n  } catch(error){\n    res.fail('Token is invalid.');\n  }\n};\n"]}