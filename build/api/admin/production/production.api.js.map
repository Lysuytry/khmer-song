{"version":3,"sources":["../../../../src/api/admin/production/production.api.js"],"names":["getProductionList","req","res","limit","offset","status","name","query","filterName","Op","like","conditions","rows","count","Production","findAndCountAll","where","success","error","fail","message","createProduction","body","createdBy","updatedBy","authUser","production","findOrCreate","defaults","updateProductionById","id","params","statusQuery","logo","data","update","deleteProductionById","result","getProductionById","findOne"],"mappings":"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","file":"production.api.js","sourcesContent":["import Production from '../../../models/production';\nimport {Op} from '../../../common/sequelize-connection';\n\nexport const getProductionList = async (req, res) => {\n  try{\n    const {limit, offset, status, name} = req.query;\n    const filterName = name ? {name: { [Op.like]: `%${name}%`}} : {};\n    const conditions = {...filterName, status};\n    const {rows, count} = await Production.findAndCountAll({where: conditions, limit, offset});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const createProduction = async (req, res) => {\n  try{\n    const {name} = req.body;\n    const {createdBy, updatedBy} = req.authUser;\n    const [production] = await Production.findOrCreate({where: {name}, defaults: {...req.body, createdBy, updatedBy} });\n    res.success(production);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const updateProductionById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const statusQuery = req.query.status;\n    let {name, logo, status} = req.body;\n    const { updatedBy } = req.authUser;\n    name = name ? {name} : {};\n    logo = logo ? {logo} : {};\n    //createdBy = createdBy ? {createdBy} : {};\n    status = status ? {status} : {};\n    const data = {...name, ...logo, ...status, updatedBy};\n    await Production.update(data, {where: {id, 'status': statusQuery}});\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const deleteProductionById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const { updatedBy } = req.authUser;\n    const [result] = await Production.update({status: 'inactive', updatedBy}, {where: {id, status: 'active'}});\n    result === 0 ? res.success('Id is not found.') : res.success('Successfully deleted.');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const getProductionById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const production = await Production.findOne({where: {id, status}});\n    res.success(production);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n"]}