{"version":3,"sources":["../../../../src/api/admin/artist/artist.api.js"],"names":["getArtistList","req","res","limit","offset","status","name","query","fliterName","Op","like","conditions","rows","count","Artist","findAndCountAll","where","success","error","fail","message","createArtist","body","artist","findOrCreate","defaults","getArtistById","id","params","findOne","updateArtistById","type","image","createdBy","updatedBy","data","update","deletedArtistById","result"],"mappings":"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","file":"artist.api.js","sourcesContent":["import Artist from '../../../models/artist';\nimport {Op} from '../../../common/sequelize-connection';\n\nexport const getArtistList = async (req, res) => {\n  try{\n    const {limit, offset, status, name} = req.query;\n    const fliterName = name ? {name: {[Op.like] : `%${name}%`} } : {};\n    const conditions = {...fliterName, status};\n    const {rows, count} = await Artist.findAndCountAll({where: conditions, limit, offset});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const createArtist = async (req, res) => {\n  try{\n    const {name} = req.body;\n    const [artist] = await Artist.findOrCreate({where: {name}, defaults: req.body});\n    res.success(artist);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const getArtistById = async (req, res) => {\n  try{\n    const {status} = req.query;\n    const {id} = req.params;\n    const artist = await Artist.findOne({where: {id, status}});\n    res.success(artist);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const updateArtistById = async (req, res) => {\n  try{\n    const {status} = req.query;\n    const {id} = req.params;\n    let {name, type, image, createdBy, updatedBy} = req.body;\n    name = name ? {name} : {};\n    type = type ? {type} : {};\n    image = image ? {image} : {};\n    createdBy = createdBy ? {createdBy} : {};\n    updatedBy = updatedBy ? {updatedBy} : {};\n    const data = {...name, ...type, ...image, ...createdBy, ...updatedBy};\n    await Artist.update(data, {where: {id, status}});\n    res.success('Succesfully updated');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const deletedArtistById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const result = await Artist.update({status: 'inactive'}, {where: {id, status: 'active'}});\n    result === 1 ? res.success('Successfully deleted.') : res.success('Id not found');\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n"]}