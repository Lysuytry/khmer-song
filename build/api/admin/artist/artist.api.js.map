{"version":3,"sources":["../../../../src/api/admin/artist/artist.api.js"],"names":["getArtistList","req","res","limit","offset","status","name","query","filterName","Op","like","conditions","rows","count","Artist","findAndCountAll","where","success","error","fail","message","createArtist","body","createdBy","updatedBy","authUser","artist","findOrCreate","defaults","getArtistById","id","params","findOne","updateArtistById","type","image","data","update","deletedArtistById","result"],"mappings":"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","file":"artist.api.js","sourcesContent":["import Artist from '../../../models/artist';\nimport { Op } from '../../../common/sequelize-connection';\n\nexport const getArtistList = async (req, res) => {\n  try {\n    const { limit, offset, status, name } = req.query;\n    const filterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const conditions = { ...filterName, status };\n    const { rows, count } = await Artist.findAndCountAll({ where: conditions, limit, offset });\n    res.success(rows, { limit, offset, count });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const createArtist = async (req, res) => {\n  try {\n    const { name } = req.body;\n    const { createdBy, updatedBy } = req.authUser;\n    const [artist] = await Artist.findOrCreate({ where: { name }, defaults: { ...req.body, createdBy, updatedBy } });\n    res.success(artist);\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getArtistById = async (req, res) => {\n  try {\n    const { status } = req.query;\n    const { id } = req.params;\n    const artist = await Artist.findOne({ where: { id, status } });\n    res.success(artist);\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const updateArtistById = async (req, res) => {\n  try {\n    const { status } = req.query;\n    const { id } = req.params;\n    const { updatedBy } = req.authUser;\n    let { name, type, image} = req.body;\n    name = name ? { name } : {};\n    type = type ? { type } : {};\n    image = image ? { image } : {};\n    const data = { ...name, ...type, ...image, updatedBy };\n    await Artist.update(data, { where: { id, status } });\n    res.success('Successfully updated');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const deletedArtistById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { updatedBy } = req.authUser;\n    const result = await Artist.update({ status: 'inactive', updatedBy}, { where: { id, status: 'active' } });\n    result === 1 ? res.success('Successfully deleted.') : res.success('Id not found');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}