{"version":3,"sources":["../../../../src/api/admin/category/category.api.js"],"names":["getCategoryList","req","res","limit","offset","status","name","query","filterName","Op","like","conditions","rows","count","Category","findAndCountAll","where","success","error","fail","message","createCategory","body","updatedBy","createdBy","authUser","category","findOrCreate","defaults","getCategoryById","id","params","findOne","updateCategoryById","statusQuery","data","update","deleteCategory","result"],"mappings":"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","file":"category.api.js","sourcesContent":["import Category from '../../../models/category';\nimport { Op } from '../../../common/sequelize-connection';\n\nexport const getCategoryList = async (req, res) => {\n  try {\n    const { limit, offset, status, name } = req.query;\n    const filterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const conditions = { ...filterName, status };\n    const { rows, count } = await Category.findAndCountAll({ where: conditions, limit, offset });\n    res.success(rows, { limit, offset, count });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const createCategory = async (req, res) => {\n  try {\n    const { name } = req.body;\n    const { updatedBy, createdBy } = req.authUser;\n    const [category] = await Category.findOrCreate({\n      where: { name },\n      defaults: { ...req.body, createdBy, updatedBy }\n    });\n    res.success(category);\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getCategoryById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const category = await Category.findOne({ where: { id, status } });\n    res.success(category);\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const updateCategoryById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const statusQuery = req.query.status;\n    const { updatedBy } = req.authUser;\n    let { name, status } = req.body;\n    name ? { name } : {};\n    updatedBy ? { updatedBy } : {};\n    status ? { status } : {};\n    const data = { ...name, ...status, updatedBy };\n    await Category.update(data, { where: { id, status: statusQuery } });\n    res.success('Successfully updated.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const deleteCategory = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { updatedBy } = req.authUser;\n    const [result] = await Category.update({ status: 'inactive', updatedBy }, { where: { id, status: 'active' } });\n    result === 0 ? res.success('Id is not found.') : res.success('Successfully deleted');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}