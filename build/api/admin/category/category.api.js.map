{"version":3,"sources":["../../../../src/api/admin/category/category.api.js"],"names":["getCategoryList","req","res","limit","offset","status","name","query","fliterName","Op","like","conditions","rows","count","Category","findAndCountAll","where","success","error","fail","createCategory","body","category","findOrCreate","defaults","getCategoryById","id","params","findOne","updateCategoryById","statusQuery","createdBy","updatedBy","data","update","deleteCategory","result"],"mappings":"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","file":"category.api.js","sourcesContent":["import Category from '../../../models/category';\nimport {Op} from '../../../common/sequelize-connection';\n\nexport const getCategoryList = async (req, res) => {\n  try{\n    const {limit, offset, status, name} = req.query;\n    const fliterName = name ? {name: { [Op.like]: `%${name}%` } } : {};\n    const conditions = {...fliterName, status};\n    const {rows, count} = await Category.findAndCountAll({where: conditions, limit, offset});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const createCategory = async (req, res) => {\n  try{\n    const {name} = req.body;\n    const [category] = await Category.findOrCreate({where: {name}, defaults: req.body});\n    res.success(category);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getCategoryById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const category = await Category.findOne({where: {id, status}});\n    res.success(category);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateCategoryById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const statusQuery = req.query.status;\n    let {name, status, createdBy, updatedBy} = req.body;\n    name ? {name} : {};\n    createdBy ? {createdBy} : {};\n    updatedBy ? {updatedBy} : {};\n    status ? {status} : {};\n    const data = {...name, ...status, ...createdBy, ...updatedBy};\n    await Category.update(data,{where: {id, status: statusQuery}});\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deleteCategory = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const [result] = await Category.update({status: 'inactive'}, {where: {id, status: 'active'}});\n    result === 0 ? res.success('Id is not found.') : res.success('Successfully deleted');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}