{"version":3,"sources":["../../../../src/api/admin/song/song.api.js"],"names":["getSongList","req","res","limit","offset","status","name","query","fliterName","Op","like","conditions","rows","count","Song","findAndCount","where","success","error","fail","getSongById","id","params","song","findOne","deleteSongById","result","update","createSong","albumId","categoryId","artistIds","duration","size","createdBy","updatedBy","body","fliterArtist","in","hasAlbum","hasCategory","hasArtist","Promise","all","Album","Category","Artist","findAll","length","updateSongById"],"mappings":";;;;;;;;AAEA;;;AAFA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEO,MAAMA,oCAAc,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAG;AACD,UAAM,EAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,IAAxB,KAAgCL,IAAIM,KAA1C;AACA,UAAMC,aAAaF,OAAO,EAACA,MAAM,EAAC,CAACG,wBAAGC,IAAJ,GAAY,IAAGJ,IAAK,GAArB,EAAP,EAAP,GAA0C,EAA7D;AACA,UAAMK,0BAAiBH,UAAjB,IAA6BH,MAA7B,GAAN;AACA,UAAM,EAACO,IAAD,EAAOC,KAAP,KAAgB,MAAMC,eAAKC,YAAL,CAAkB,EAACC,OAAOL,UAAR,EAAoBP,MAApB,EAA4BD,KAA5B,EAAlB,CAA5B;AACAD,QAAIe,OAAJ,CAAYL,IAAZ,EAAkB,EAACT,KAAD,EAAQC,MAAR,EAAgBS,KAAhB,EAAlB;AACD,GAND,CAME,OAAMK,KAAN,EAAY;AACZhB,QAAIiB,IAAJ,CAASD,KAAT;AACD;AACF,CAVM;;AAYA,MAAME,oCAAc,OAAOnB,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAG;AACD,UAAM,EAACmB,EAAD,KAAOpB,IAAIqB,MAAjB;AACA,UAAM,EAACjB,MAAD,KAAWJ,IAAIM,KAArB;AACA,UAAMgB,OAAO,MAAMT,eAAKU,OAAL,CAAa,EAACR,OAAO,EAACK,EAAD,EAAKhB,MAAL,EAAR,EAAb,CAAnB;AACAkB,WAAOrB,IAAIe,OAAJ,CAAYM,IAAZ,CAAP,GAA2BrB,IAAIe,OAAJ,CAAY,EAAZ,CAA3B;AACD,GALD,CAKE,OAAMC,KAAN,EAAY;AACZhB,QAAIiB,IAAJ,CAASD,KAAT;AACD;AACF,CATM;;AAWA,MAAMO,0CAAiB,OAAOxB,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAG;AACD,UAAM,EAACmB,EAAD,KAAOpB,IAAIqB,MAAjB;AACA,UAAM,CAACI,MAAD,IAAW,MAAMZ,eAAKa,MAAL,CAAY,EAACtB,QAAQ,UAAT,EAAZ,EAAkC,EAACW,OAAO,EAACK,EAAD,EAAKhB,QAAS,QAAd,EAAR,EAAlC,CAAvB;AACAqB,eAAW,CAAX,GAAexB,IAAIiB,IAAJ,CAAS,kBAAT,CAAf,GAA8CjB,IAAIe,OAAJ,CAAY,uBAAZ,CAA9C;AACD,GAJD,CAIE,OAAMC,KAAN,EAAY;AACZhB,QAAIiB,IAAJ,CAASD,KAAT;AACD;AACF,CARM;;AAUP;AACO,MAAMU,kCAAa,OAAO3B,GAAP,EAAYC,GAAZ,KAAoB;AAC5C,MAAG;AACD,UAAM,EAAC2B,OAAD,EAAUC,UAAV,EAAsBC,SAAtB,EAAiCzB,IAAjC,EAAuC0B,QAAvC,EAAiDC,IAAjD,EAAuDC,SAAvD,EAAkEC,SAAlE,KAA+ElC,IAAImC,IAAzF;AACA,UAAM,EAAC/B,MAAD,KAAWJ,IAAIM,KAArB;AACA,UAAM8B,eAAe,EAAChB,IAAI,EAAC,CAACZ,wBAAG6B,EAAJ,GAASP,SAAV,EAAL,EAA2B1B,MAA3B,EAArB;AACA;AACA,UAAM,CAACkC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,IAAqC,MAAMC,QAAQC,GAAR,CAAY,CAAEC,gBAAM/B,KAAN,CAAY,EAACG,OAAO,EAACK,IAAIQ,OAAL,EAAcxB,MAAd,EAAR,EAAZ,CAAF,EAC3DwC,mBAAShC,KAAT,CAAe,EAACG,OAAO,EAACK,IAAIS,UAAL,EAAiBzB,MAAjB,EAAR,EAAf,CAD2D,EACRyC,iBAAOC,OAAP,CAAe,EAAC/B,OAAOqB,YAAR,EAAf,CADQ,CAAZ,CAAjD;AAEA;AACAE,eAAWC,cAAcC,UAAUO,MAAV,IAAoBjB,UAAUiB,MAA9B,GAAuC,EAAvC,GAA4C9C,IAAIiB,IAAJ,CAAS,yBAAT,CAA1D,GAAgGjB,IAAIiB,IAAJ,CAAS,2BAAT,CAA3G,GAAmJjB,IAAIiB,IAAJ,CAAS,wBAAT,CAAnJ;AACA;AACA,UAAMI,OAAO,MAAM,sBAAW,EAACM,OAAD,EAAUC,UAAV,EAAsBC,SAAtB,EAAiCzB,IAAjC,EAAuC0B,QAAvC,EAAiDC,IAAjD,EAAuDC,SAAvD,EAAkEC,SAAlE,EAAX,CAAnB;AACAjC,QAAIe,OAAJ,CAAYM,IAAZ;AACD,GAZD,CAYE,OAAML,KAAN,EAAY;AACZhB,QAAIiB,IAAJ,CAASD,MAAMZ,IAAf;AACD;AACF,CAhBM;;AAkBA,MAAM2C,0CAAiB,OAAOhD,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAG;AACDA,QAAIe,OAAJ,CAAY,uBAAZ;AACD,GAFD,CAEE,OAAMC,KAAN,EAAY;AACZhB,QAAIiB,IAAJ,CAASD,KAAT;AACD;AACF,CANM","file":"song.api.js","sourcesContent":["import Song, {insertSong} from '../../../models/song';\nimport Artist from '../../../models/artist';\n//import ArtistSong from '../../../models/artist-song';\nimport Album from '../../../models/album';\nimport Category from '../../../models/category';\nimport {Op} from '../../../common/sequelize-connection';\n\nexport const getSongList = async (req, res) => {\n  try{\n    const {limit, offset, status, name} = req.query;\n    const fliterName = name ? {name: {[Op.like]: `%${name}%`}} : {};\n    const conditions = {...fliterName, status};\n    const {rows, count} = await Song.findAndCount({where: conditions, offset, limit});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getSongById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const song = await Song.findOne({where: {id, status}});\n    song ? res.success(song) : res.success({});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deleteSongById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const [result] = await Song.update({status: 'inactive'}, {where: {id, status : 'active'}});\n    result === 0 ? res.fail('Id is not found.') : res.success('Successfully deleted.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n//create with album , category and artist\nexport const createSong = async (req, res) => {\n  try{\n    const {albumId, categoryId, artistIds, name, duration, size, createdBy, updatedBy} = req.body;\n    const {status} = req.query;\n    const fliterArtist = {id: {[Op.in]: artistIds}, status};\n    //check all these folks that are existing or not ...\n    const [hasAlbum, hasCategory, hasArtist] = await Promise.all([ Album.count({where: {id: albumId, status}}),\n      Category.count({where: {id: categoryId, status}}), Artist.findAll({where: fliterArtist}) ]);\n    //response what wrong with these\n    hasAlbum ? hasCategory ? hasArtist.length == artistIds.length ? {} : res.fail('Artist Id is not found.') : res.fail('Category Id is not found.') : res.fail('Album Id is not found.');\n    //otherwise => insert part\n    const song = await insertSong({albumId, categoryId, artistIds, name, duration, size, createdBy, updatedBy});\n    res.success(song);\n  } catch(error){\n    res.fail(error.name);\n  }\n};\n\nexport const updateSongById = async (req, res) => {\n  try{\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}