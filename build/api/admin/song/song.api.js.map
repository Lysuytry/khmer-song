{"version":3,"sources":["../../../../src/api/admin/song/song.api.js"],"names":["getSongList","req","res","limit","offset","status","name","query","fliterName","Op","like","conditions","rows","count","Song","findAndCount","where","success","error","fail","message","getSongById","id","params","song","findOne","deleteSongById","result","update","createSong","albumId","categoryId","artistIds","duration","size","createdBy","updatedBy","body","fliterArtist","in","hasAlbum","hasCategory","hasArtist","Promise","all","Album","attributes","Category","Artist","findAll","length","updateSongById","fliterAlbum","fliterCategory","Array","isArray","fliterDuration","fliterSize","data"],"mappings":"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","file":"song.api.js","sourcesContent":["import Song, { insertSong, updateSong } from '../../../models/song';\nimport Artist from '../../../models/artist';\n//import ArtistSong from '../../../models/artist-song';\nimport Album from '../../../models/album';\nimport Category from '../../../models/category';\nimport { Op } from '../../../common/sequelize-connection';\n\nexport const getSongList = async (req, res) => {\n  try {\n    const { limit, offset, status, name } = req.query;\n    const fliterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const conditions = { ...fliterName, status };\n    const { rows, count } = await Song.findAndCount({ where: conditions, offset, limit });\n    res.success(rows, { limit, offset, count });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const song = await Song.findOne({ where: { id, status } });\n    song ? res.success(song) : res.success({});\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const deleteSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const [result] = await Song.update({ status: 'inactive' }, { where: { id, status: 'active' } });\n    result === 0 ? res.fail('Id is not found.') : res.success('Successfully deleted.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\n//create with album , category and artist\nexport const createSong = async (req, res) => {\n  try {\n    const { albumId, categoryId, artistIds, name, duration, size, createdBy, updatedBy } = req.body;\n    const { status } = req.query;\n    const fliterArtist = { id: { [Op.in]: artistIds }, status };\n    //check all these folks that are existing or not ...\n    const [hasAlbum, hasCategory, hasArtist] = await Promise.all([\n      Album.findOne({ attributes: ['id'], where: { id: albumId, status } }),\n      Category.findOne({ attributes: ['id'], where: { id: categoryId, status } }),\n      Artist.findAll({ attributes: ['id'], where: fliterArtist })\n    ]);\n    //response what wrong with these\n    hasAlbum\n      ? hasCategory\n        ? hasArtist.length == artistIds.length\n          ? {}\n          : res.fail('Artist Id is not found.')\n        : res.fail('Category Id is not found.')\n      : res.fail('Album Id is not found.');\n    //otherwise => insert part\n    const song = await insertSong({ albumId, categoryId, artistIds, name, duration, size, createdBy, updatedBy });\n    res.success(song);\n  } catch (error) {\n    res.fail(error.name);\n  }\n};\n\nexport const updateSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { albumId, categoryId, artistIds, name, duration, size, updatedBy } = req.body;\n    //const { status } = req.query;\n    //check if song Id is exist or not because I dont want to query sth before check it\n    const result = await Song.findOne({ where: { id, status: 'active' } });\n    if (!result) res.fail('Song Id is invalid.');\n    //if exist => query for update\n    const fliterAlbum = albumId ? Album.findOne({ where: { id: albumId, status: 'active' } }) : {};\n    const fliterCategory = categoryId ? Category.findOne({ where: { id: categoryId, status: 'active' } }) : {};\n    const fliterArtist = artistIds ? Artist.findAll({ where: { id: { [Op.in]: artistIds }, status: 'active' } }) : {};\n    //if include album , ... => process to check\n    const [hasAlbum = 0, hasCategory = 0, hasArtist = 0] = await Promise.all([\n      fliterAlbum,\n      fliterCategory,\n      fliterArtist\n    ]);\n    //response what wrong with these\n    hasAlbum\n      ? hasCategory\n        ? Array.isArray(hasArtist)\n          ? hasArtist.length === artistIds.length\n            ? {} //isArray but donot found some artist id\n            : res.fail('Some artist Id is invalid.')\n          : {} // if no process of that query\n        : res.fail('Category Id is not found.')\n      : res.fail('Album Id is not found.');\n\n    const fliterName = name ? { name: name } : {};\n    const fliterDuration = duration ? { duration: duration } : {};\n    const fliterSize = size ? { size: size } : {};\n    //for table song need to update\n    const data = { ...fliterName, ...fliterSize, ...fliterDuration, ...fliterAlbum, ...fliterCategory, updatedBy };\n    await updateSong({ data, id, artistIds });\n    res.success('Successfully updated.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}