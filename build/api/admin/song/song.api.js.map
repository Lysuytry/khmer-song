{"version":3,"sources":["../../../../src/api/admin/song/song.api.js"],"names":["getSongList","req","res","limit","offset","status","name","query","filterName","Op","like","conditions","rows","count","Song","findAndCount","where","success","error","fail","message","getSongById","id","params","song","findOne","deleteSongById","updatedBy","authUser","result","update","createSong","albumId","categoryId","artistIds","duration","size","body","createdBy","filterArtist","in","album","category","artist","Promise","all","Album","attributes","Category","Artist","length","updateSongById","filterAlbum","filterCategory","findAll","Array","isArray","filterDuration","filterSize","data"],"mappings":"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","file":"song.api.js","sourcesContent":["import Song, { insertSong, updateSong } from '../../../models/song';\nimport Artist from '../../../models/artist';\n//import ArtistSong from '../../../models/artist-song';\nimport Album from '../../../models/album';\nimport Category from '../../../models/category';\nimport { Op } from '../../../common/sequelize-connection';\n\nexport const getSongList = async (req, res) => {\n  try {\n    const { limit, offset, status, name } = req.query;\n    const filterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const conditions = { ...filterName, status };\n    const { rows, count } = await Song.findAndCount({ where: conditions, offset, limit });\n    res.success(rows, { limit, offset, count });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const song = await Song.findOne({ where: { id, status } });\n    song ? res.success(song) : res.success({});\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const deleteSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { updatedBy } = req.authUser;\n    const [result] = await Song.update({ status: 'inactive', updatedBy }, { where: { id, status: 'active' } });\n    result === 0 ? res.fail('Id is not found.') : res.success('Successfully deleted.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\n//create with album , category and artist\nexport const createSong = async (req, res) => {\n  try {\n    const { albumId, categoryId, artistIds, name, duration, size } = req.body;\n    const { updatedBy, createdBy } = req.authUser;\n    const { status } = req.query;\n    const filterArtist = { id: { [Op.in]: artistIds }, status };\n    //check all these folks that are existing or not ...\n    const [album, category, artist] = await Promise.all([\n      Album.findOne({ attributes: ['id'], where: { id: albumId, status } }),\n      Category.findOne({ attributes: ['id'], where: { id: categoryId, status } }),\n      Artist.count({ where: filterArtist })\n    ]);\n\n    //response what wrong with these\n    if (!album) return res.fail('Album Id is not found.');\n    if (!category) return res.fail('Category Id is not found.');\n    if (artist != artistIds.length) return res.fail('Artist Id is not found.');\n\n    //otherwise => insert part\n    const song = await insertSong({ albumId, categoryId, artistIds, name, duration, size, createdBy, updatedBy });\n    res.success(song);\n  } catch (error) {\n    res.fail(error.name);\n  }\n};\n\nexport const updateSongById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { updatedBy } = req.authUser;\n    const { albumId, categoryId, artistIds, name, duration, size } = req.body;\n    //const { status } = req.query;\n    //check if song Id is exist or not because I dont want to query sth before check it\n    const result = await Song.findOne({ where: { id, status: 'active' } });\n    if (!result) res.fail('Song Id is invalid.');\n    //if exist => query for update\n    const filterAlbum = albumId ? Album.findOne({ where: { id: albumId, status: 'active' } }) : {};\n    const filterCategory = categoryId ? Category.findOne({ where: { id: categoryId, status: 'active' } }) : {};\n    const filterArtist = artistIds ? Artist.findAll({ where: { id: { [Op.in]: artistIds }, status: 'active' } }) : {};\n    //if include album , ... => process to check\n    const [album = 0, category = 0, artist = 0] = await Promise.all([filterAlbum, filterCategory, filterArtist]);\n\n    //response what wrong with these\n    if (!album) return res.fail('Album Id is not found.');\n    if (!category) return res.fail('Category Id is not found.');\n    if (Array.isArray(artist)) {\n      if (artist.length === artistIds.length) return res.fail('Some artist Id is invalid.');\n    }\n\n    const filterName = name ? { name: name } : {};\n    const filterDuration = duration ? { duration: duration } : {};\n    const filterSize = size ? { size: size } : {};\n    //for table song need to update\n    const data = { ...filterName, ...filterSize, ...filterDuration, ...filterAlbum, ...filterCategory, updatedBy };\n    await updateSong({ data, id, artistIds });\n    res.success('Successfully updated.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}