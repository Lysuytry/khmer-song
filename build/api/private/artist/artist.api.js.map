{"version":3,"sources":["../../../../src/api/private/artist/artist.api.js"],"names":["getArtistList","req","res","limit","offset","status","query","rows","count","Artist","findAndCountAll","where","success","error","fail","createArtist","name","body","artist","findOrCreate","defaults","getArtistById","id","params","find","updateArtistById","type","image","createdBy","updatedBy","data","update","deletedArtistById","result"],"mappings":"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","file":"artist.api.js","sourcesContent":["import Artist from '../../../models/artist';\n\nexport const getArtistList = async (req, res) => {\n  try{\n    const {limit, offset, status} = req.query;\n    const {rows, count} = await Artist.findAndCountAll({where: {status}}, {limit});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const createArtist = async (req, res) => {\n  try{\n    const {name} = req.body;\n    const [artist] = await Artist.findOrCreate({where: {name}, defaults: req.body});\n    res.success(artist);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getArtistById = async (req, res) => {\n  try{\n    const {status} = req.query;\n    const {id} = req.params;\n    const artist = await Artist.find({where: {id, status}});\n    res.success(artist);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateArtistById = async (req, res) => {\n  try{\n    const {status} = req.query;\n    const {id} = req.params;\n    let {name, type, image, createdBy, updatedBy} = req.body;\n    name = name ? {name} : {};\n    type = type ? {type} : {};\n    image = image ? {image} : {};\n    createdBy = createdBy ? {createdBy} : {};\n    updatedBy = updatedBy ? {updatedBy} : {};\n    const data = {...name, ...type, ...image, ...createdBy, ...updatedBy};\n    await Artist.update(data, {where: {id, status}});\n    res.success('Succesfully updated');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deletedArtistById = async (req, res) => {\n  try{\n    const {status} = req.query;\n    const {id} = req.params;\n    const result = await Artist.update({status: 'inactive'}, {where: {id, status}});\n    result === 1 ? res.success('Successfully deleted.') : res.success('Id not found');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}