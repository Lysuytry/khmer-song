{"version":3,"sources":["../../../../src/api/private/category/category.api.js"],"names":["getCategoryList","req","res","limit","offset","status","query","rows","count","Category","findAndCountAll","where","success","error","fail","createCategory","name","body","category","findOrCreate","defaults","getCategoryById","id","params","findOne","updateCategoryById","statusQuery","createdBy","updatedBy","data","update","deleteCategory","result"],"mappings":"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","file":"category.api.js","sourcesContent":["import Category from '../../../models/category';\n\nexport const getCategoryList = async (req, res) => {\n  try{\n    const {limit, offset, status} = req.query;\n    const {rows, count} = await Category.findAndCountAll({where: {status}, limit, offset});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const createCategory = async (req, res) => {\n  try{\n    const {name} = req.body;\n    const [category] = await Category.findOrCreate({where: {name}, defaults: req.body});\n    res.success(category);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getCategoryById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const category = await Category.findOne({where: {id, status}});\n    res.success(category);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const updateCategoryById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const statusQuery = req.query.status;\n    let {name, status, createdBy, updatedBy} = req.body;\n    name ? {name} : {};\n    createdBy ? {createdBy} : {};\n    updatedBy ? {updatedBy} : {};\n    status ? {status} : {};\n    const data = {...name, ...status, ...createdBy, ...updatedBy};\n    await Category.update(data,{where: {id, status: statusQuery}});\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deleteCategory = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const result = await Category.update({status: 'inactive'}, {where: {id, status: 'active'}});\n    result === 0 ? res.success('Id is not found.') : res.success('Successfully deleted');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}