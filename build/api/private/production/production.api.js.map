{"version":3,"sources":["../../../../src/api/private/production/production.api.js"],"names":["getProductionList","req","res","limit","offset","status","query","rows","count","Production","findAndCountAll","where","success","error","fail","message","createProduction","production","findOrCreate","name","defaults","body","updateProductionById","id","params","logo","createdBy","updatedBy","data","log","update","deleteProductionById","result","getProductionById","findOne"],"mappings":";;;;;;;;;AAAA;;;;;;AAEO,MAAMA,gDAAoB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnD,MAAG;AACD,UAAM,EAACC,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,KAA0BJ,IAAIK,KAApC;AACA,UAAM,EAACC,IAAD,EAAOC,KAAP,KAAgB,MAAMC,qBAAWC,eAAX,CAA2B,EAACC,OAAO,EAACN,MAAD,EAAR,EAAkBF,KAAlB,EAAyBC,MAAzB,EAA3B,CAA5B;AACAF,QAAIU,OAAJ,CAAYL,IAAZ,EAAkB,EAACJ,KAAD,EAAQC,MAAR,EAAgBI,KAAhB,EAAlB;AACD,GAJD,CAIE,OAAMK,KAAN,EAAY;AACZX,QAAIY,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CARM;;AAUA,MAAMC,8CAAmB,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AAClD,MAAG;AACD,UAAMe,aAAa,MAAMR,qBAAWS,YAAX,CAAwB,EAACP,OAAO,EAACQ,IAAD,EAAR,EAAgBC,UAAUnB,IAAIoB,IAA9B,EAAxB,CAAzB;AACAnB,QAAIU,OAAJ,CAAYK,UAAZ;AACD,GAHD,CAGE,OAAMJ,KAAN,EAAY;AACZX,QAAIY,IAAJ,CAASD,KAAT;AACD;AACF,CAPM;;AASA,MAAMS,sDAAuB,OAAOrB,GAAP,EAAYC,GAAZ,KAAoB;AACtD,MAAG;AACD,UAAM,EAACqB,EAAD,KAAOtB,IAAIuB,MAAjB;AACA,UAAM,EAACnB,MAAD,KAAWJ,IAAIK,KAArB;AACA,QAAI,EAACa,IAAD,EAAOM,IAAP,EAAaC,SAAb,EAAwBC,SAAxB,KAAqC1B,IAAIoB,IAA7C;AACAF,WAAO,EAACA,IAAD,EAAP,GAAgB,EAAhB;AACAM,WAAO,EAACA,IAAD,EAAP,GAAgB,EAAhB;AACAC,gBAAY,EAACA,SAAD,EAAZ,GAA0B,EAA1B;AACAC,gBAAY,EAACA,SAAD,EAAZ,GAA0B,EAA1B;AACA,UAAMC,oBAAWT,IAAX,EAAoBU,GAApB,EAA4BH,SAA5B,EAA0CC,SAA1C,CAAN;AACA,UAAMlB,qBAAWqB,MAAX,CAAkBF,IAAlB,EAAwB,EAACjB,OAAO,EAACY,EAAD,EAAKlB,MAAL,EAAR,EAAxB,CAAN;AACAH,QAAIU,OAAJ,CAAY,uBAAZ;AACD,GAXD,CAWE,OAAMC,KAAN,EAAY;AACZX,QAAIY,IAAJ,CAASD,KAAT;AACD;AACF,CAfM;;AAiBA,MAAMkB,sDAAuB,OAAO9B,GAAP,EAAYC,GAAZ,KAAoB;AACtD,MAAG;AACD,UAAM,EAACqB,EAAD,KAAOtB,IAAIuB,MAAjB;AACA,UAAM,EAACnB,MAAD,KAAWJ,IAAIK,KAArB;AACA,UAAM0B,SAAS,MAAMvB,qBAAWqB,MAAX,CAAkB,EAACzB,QAAQ,UAAT,EAAlB,EAAwC,EAACM,OAAO,EAACY,EAAD,EAAKlB,QAAQ,QAAb,EAAR,EAAxC,CAArB;AACA2B,eAAW,CAAX,GAAe9B,IAAIU,OAAJ,CAAY,uBAAZ,CAAf,GAAsDV,IAAIU,OAAJ,CAAY,kBAAZ,CAAtD;AACD,GALD,CAKE,OAAMC,KAAN,EAAY;AACZX,QAAIY,IAAJ,CAASD,KAAT;AACD;AACF,CATM;;AAWA,MAAMoB,gDAAoB,OAAOhC,GAAP,EAAYC,GAAZ,KAAoB;AACnD,MAAG;AACD,UAAM,EAACqB,EAAD,KAAOtB,IAAIuB,MAAjB;AACA,UAAM,EAACnB,MAAD,KAAWJ,IAAIK,KAArB;AACA,UAAMW,aAAa,MAAMR,qBAAWyB,OAAX,CAAmB,EAACvB,OAAO,EAACY,EAAD,EAAKlB,MAAL,EAAR,EAAnB,CAAzB;AACAH,QAAIU,OAAJ,CAAYK,UAAZ;AACD,GALD,CAKE,OAAMJ,KAAN,EAAY;AACZX,QAAIY,IAAJ,CAASD,KAAT;AACD;AACF,CATM","file":"production.api.js","sourcesContent":["import Production from '../../../models/production';\n\nexport const getProductionList = async (req, res) => {\n  try{\n    const {limit, offset, status} = req.query;\n    const {rows, count} = await Production.findAndCountAll({where: {status}, limit, offset});\n    res.success(rows, {limit, offset, count});\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const createProduction = async (req, res) => {\n  try{\n    const production = await Production.findOrCreate({where: {name}, defaults: req.body});\n    res.success(production);\n  } catch(error){\n    res.fail(error);\n  }\n}\n\nexport const updateProductionById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    let {name, logo, createdBy, updatedBy} = req.body;\n    name ? {name} : {};\n    logo ? {logo} : {};\n    createdBy ? {createdBy} : {};\n    updatedBy ? {updatedBy} : {};\n    const data = {...name, ...log, ...createdBy, ...updatedBy};\n    await Production.update(data, {where: {id, status}});\n    res.success('Successfully updated.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deleteProductionById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const result = await Production.update({status: 'inactive'}, {where: {id, status: 'active'}});\n    result === 1 ? res.success('Successfully deleted.') : res.success('Id is not found.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getProductionById = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {status} = req.query;\n    const production = await Production.findOne({where: {id, status}});\n    res.success(production);\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}