{"version":3,"sources":["../../../src/api/room/room.api.js"],"names":["createRoom","req","res","id","updatedBy","createdBy","authUser","name","friendId","body","room","success","error","fail","getRoomById","data","Room","findOne","where","status","Error","message","getRoomList","limit","offset","query","rows","count","RoomUser","findAndCountAll","raw","attributes","userId","getRoomChatById","params","file","path","join","__dirname","sendFile","getRoomChat","joinAllChatRoom","socket","findAll","forEach"],"mappings":"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","file":"room.api.js","sourcesContent":["import Room, { createRoomAndUser } from '../../models/room';\nimport RoomUser from '../../models/room-user';\nimport path from 'path';\n//import { Op } from '../../common/sequelize-connection';\n\n// export const createRoom = async (data) => {\n//   try{\n//     const\n//     const room = await Room.create(data);\n//     const roomData = {userId: id, roomId: room.id};\n//     const roomUser = await RoomUser.create(roomData);\n//     return room;\n//   } catch(error){\n//     return new Error(error.message);\n//   }\n// };\n\nexport const createRoom = async (req, res) => {\n  try {\n    const { id, updatedBy, createdBy } = req.authUser;\n    const { name, friendId } = req.body;\n    const room = await createRoomAndUser({ name, updatedBy, createdBy, id, friendId });\n    res.success(room);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getRoomById = async data => {\n  try {\n    const { id } = data;\n    const room = await Room.findOne({ where: { id, status } });\n    return room;\n  } catch (error) {\n    return new Error(error.message);\n  }\n};\n\nexport const getRoomList = async (req, res) => {\n  try {\n    const { id } = req.authUser;\n    const { limit, offset } = req.query;\n    const { rows, count } = await RoomUser.findAndCountAll({\n      raw: true,\n      attributes: [['roomId', 'id']],\n      where: { userId: id }\n    });\n    res.success(rows, { count, limit, offset });\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getRoomChatById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const room = await Room.findOne({ where: { id, status } });\n    if (!room) return res.fail('no room.');\n    const file = path.join(__dirname + '../../../../html/index.html');\n    res.sendFile(file);\n    //res.success(room);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getRoomChat = async (req, res) => {\n  try {\n    const file = path.join(__dirname + '../../../../html/index.html');\n    res.sendFile(file);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const joinAllChatRoom = async (userId, socket) => {\n  try {\n    const rows = await RoomUser.findAll({\n      raw: true,\n      attributes: [['roomId', 'id']],\n      where: { userId }\n    });\n    socket.join(userId);\n    rows.forEach(room => {\n      socket.join(room.id);\n    });\n    return null;\n  } catch (error) {\n    return error;\n  }\n};\n\n// export const leftChatRoomById = async (roomId, socket) => {\n//   try {\n//     const room = await Room.findById(roomId);\n//     if(!room) return socket.emit('error', 'Wrong room ID');\n//     socket.leave(room.id);\n//     return;\n//   } catch (error) {\n//     return new Error(error.message);\n//   }\n// };\n"]}