{"version":3,"sources":["../../../src/api/room/room.api.js"],"names":["createRoom","req","res","id","updatedBy","createdBy","authUser","name","friendIds","body","users","User","findAll","attributes","where","Op","in","status","role","length","fail","room","success","error","addUserToRoom","roomId","params","query","usersRoom","roomUsers","Promise","all","RoomUser","userId","Room","findOne","getListUserInRoom","rows","count","findAndCountAll","getRoomById","data","Error","message","getRoomList","limit","offset","rooms","getRoomChatById","deleteRoomChatById","update","getRoomChat","file","path","join","__dirname","sendFile","joinAllChatRoom","socket","forEach"],"mappings":"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","file":"room.api.js","sourcesContent":["import Room, { createRoomAndUser, addUser, findAllRoom } from '../../models/room';\nimport RoomUser from '../../models/room-user';\nimport path from 'path';\nimport { Op } from '../../common/sequelize-connection';\nimport User from '../../models/user';\n//import { Op } from '../../common/sequelize-connection';\n\n// export const createRoom = async (data) => {\n//   try{\n//     const\n//     const room = await Room.create(data);\n//     const roomData = {userId: id, roomId: room.id};\n//     const roomUser = await RoomUser.create(roomData);\n//     return room;\n//   } catch(error){\n//     return new Error(error.message);\n//   }\n// };\n\nexport const createRoom = async (req, res) => {\n  try {\n    const { id, updatedBy, createdBy } = req.authUser;\n    const { name, friendIds } = req.body;\n    //check all user's Id\n    const users = await User.findAll({\n      attributes: ['id'],\n      where: { id: { [Op.in]: friendIds }, status: 'active', role: 'guest' }\n    });\n    //if different length ==> not match all user's Id\n    if (!(friendIds.length === users.length)) return res.fail('some Id is not found.');\n    //otherwise => create room and add user\n    const room = await createRoomAndUser({ name, updatedBy, createdBy, id, friendIds });\n    //return room back to user\n    return res.success(room);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const addUserToRoom = async (req, res) => {\n  try {\n    const { roomId } = req.params;\n    const { friendIds } = req.body;\n    const { status } = req.query;\n    //check room is available to add more people\n    const [usersRoom, roomUsers, room, users] = await Promise.all([\n      RoomUser.findAll({ attributes: ['roomId'], where: { roomId, userId: { [Op.in]: friendIds } } }),\n      RoomUser.findAll({ attributes: ['roomId'], where: { roomId } }),\n      Room.findOne({ attributes: ['id'], where: { id: roomId, status } }),\n      User.findAll({ attributes: ['id'], where: { id: { [Op.in]: friendIds }, status: 'active', role: 'guest' } })\n    ]);\n    //if it is not existed\n    if (!room) return res.fail('Room Id is invalid.');\n    //check length => match or not\n    if (!(friendIds.length === users.length)) return res.fail('some Id is not found.');\n    //if friend already in group\n    if (usersRoom.length > 0) return res.fail('some Id is already in the room.');\n    //check if it more than 10 people in a room\n    if (roomUsers.length + friendIds.length > 10) return res.fail('Over the limit 10 people per room.');\n    //if matched => add user into the room\n    await addUser({ friendIds, roomId });\n    return res.success('Successfully added a user to a room.');\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getListUserInRoom = async (req, res) => {\n  try{\n    const { id } = req.params;\n    const {rows, count} = await RoomUser.findAndCountAll({ attributes: ['userId'], where: { roomId: id } });\n    res.success(rows, {count});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const getRoomById = async data => {\n  try {\n    const { id } = data;\n    const room = await Room.findOne({ where: { id, status } });\n    return room;\n  } catch (error) {\n    return new Error(error.message);\n  }\n};\n\nexport const getRoomList = async (req, res) => {\n  try {\n    const { id } = req.authUser;\n    const { limit, offset } = req.query;\n    const { rooms, count } = await findAllRoom({ id, limit, offset });\n    res.success(rooms, { ...count, limit, offset });\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getRoomChatById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const room = await Room.findOne({ where: { id, status } });\n    if (!room) return res.fail('no room.');\n    res.success(room);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const deleteRoomChatById = async (req, res) => {\n  try {\n    const { updatedBy } = req.authUser;\n    const { id } = req.params;\n    await Room.update({ updatedBy, status: 'inactive' }, { where: { id, status: 'active' } });\n    res.success('Successfully deleted room.');\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const getRoomChat = async (req, res) => {\n  try {\n    const file = path.join(__dirname + '../../../../html/index.html');\n    res.sendFile(file);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const joinAllChatRoom = async (userId, socket) => {\n  try {\n    // const rows = await RoomUser.findAll({\n    //   raw: true,\n    //   attributes: [['roomId', 'id']],\n    //   where: { userId }\n    // });\n    const limit = 20, offset = 0;\n    const { rooms, count } = await findAllRoom({ id: userId, limit, offset });\n    socket.join(userId);\n    rooms.forEach(room => {\n      socket.join(room.id);\n    });\n    return null;\n  } catch (error) {\n    return error;\n  }\n};\n\n// export const leftChatRoomById = async (roomId, socket) => {\n//   try {\n//     const room = await Room.findById(roomId);\n//     if(!room) return socket.emit('error', 'Wrong room ID');\n//     socket.leave(room.id);\n//     return;\n//   } catch (error) {\n//     return new Error(error.message);\n//   }\n// };\n"]}