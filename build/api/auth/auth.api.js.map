{"version":3,"sources":["../../../src/api/auth/auth.api.js"],"names":["SALT","process","env","registerAuth","req","res","username","password","body","hash","bcrypt","hashSync","user","User","findOrCreate","raw","where","defaults","undefined","success","error","fail","loginAuth","findOne","compareSync","payload","id","role","token","verifyUser","data"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,MAAM,EAACA,IAAD,KAASC,QAAQC,GAAvB;;AAEO,MAAMC,sCAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,MAAG;AACD,UAAM,EAACC,QAAD,EAAWC,QAAX,KAAuBH,IAAII,IAAjC;AACA;AACA,UAAMC,OAAOC,iBAAOC,QAAP,CAAgBJ,QAAhB,EAA0B,CAACP,IAA3B,CAAb;AACAI,QAAII,IAAJ,CAASD,QAAT,GAAoBE,IAApB;AACA;AACA,UAAM,CAACG,IAAD,IAAS,MAAMC,eAAKC,YAAL,CAAkB,EAACC,KAAK,IAAN,EAAYC,OAAO,EAACV,QAAD,EAAnB,EAA+BW,UAAUb,IAAII,IAA7C,EAAlB,CAArB;AACAI,SAAKL,QAAL,GAAgBW,SAAhB;AACA;AACAb,QAAIc,OAAJ,CAAYP,IAAZ;AACD,GAVD,CAUE,OAAMQ,KAAN,EAAY;AACZf,QAAIgB,IAAJ,CAASD,KAAT;AACD;AACF,CAdM;;AAgBA,MAAME,gCAAY,OAAOlB,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,MAAG;AACD,UAAM,EAACC,QAAD,EAAWC,QAAX,KAAuBH,IAAII,IAAjC;AACA;AACA,UAAMI,OAAO,MAAMC,eAAKU,OAAL,CAAa,EAACR,KAAK,IAAN,EAAYC,OAAO,EAACV,QAAD,EAAnB,EAAb,CAAnB;AACA;AACAM,WAAO,CAACF,iBAAOc,WAAP,CAAmBjB,QAAnB,EAA6BK,KAAKL,QAAlC,CAAD,GAA+CF,IAAIgB,IAAJ,CAAS,gBAAT,EAA2B,GAA3B,CAA/C,GAAiF,EAAxF,GAA6FhB,IAAIgB,IAAJ,CAAS,wBAAT,EAAmC,GAAnC,CAA7F;AACA;AACA,UAAMI,UAAU,EAACC,IAAId,KAAKc,EAAV,EAAcC,MAAMf,KAAKe,IAAzB,EAA+BrB,QAA/B,EAAhB;;AAEA,WAAOM,KAAKe,IAAL,KAAc,OAAd,GAAwBtB,IAAIc,OAAJ,cAAgBP,IAAhB,IAAsBL,UAAUW,SAAhC,EAA2CU,OAAO,mBAASH,OAAT,CAAlD,IAAxB,GAAgGpB,IAAIc,OAAJ,cAAgBP,IAAhB,IAAsBL,UAAUW,SAAhC,IAAvG;AAED,GAXD,CAWE,OAAME,KAAN,EAAY;AACZf,QAAIgB,IAAJ,CAASD,KAAT;AACD;AACF,CAfM;;AAiBP;AACO,MAAMS,kCAAa,OAAOC,IAAP,EAAazB,GAAb,KAAqB;AAC7C,MAAG;AACD,UAAMO,OAAO,MAAMC,eAAKU,OAAL,CAAa,EAACP,oBAAWc,IAAX,CAAD,EAAb,CAAnB;AACA,WAAOlB,OAAOA,IAAP,GAAcP,IAAIgB,IAAJ,CAAS,UAAT,CAArB;AACD,GAHD,CAGE,OAAMD,KAAN,EAAY;AACZf,QAAIgB,IAAJ,CAASD,KAAT;AACD;AACF,CAPM","file":"auth.api.js","sourcesContent":["import User from '../../models/user';\nimport bcrypt from 'bcrypt';\nimport {getToken} from '../../common/jwt';\n\nconst {SALT} = process.env;\n\nexport const registerAuth = async (req, res) => {\n  try{\n    const {username, password} = req.body;\n    //encrypt and save\n    const hash = bcrypt.hashSync(password, +SALT);\n    req.body.password = hash;\n    //\n    const [user] = await User.findOrCreate({raw: true, where: {username}, defaults: req.body});\n    user.password = undefined;\n    //will include token\n    res.success(user);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const loginAuth = async (req, res) => {\n  try{\n    const {username, password} = req.body;\n    //find by name\n    const user = await User.findOne({raw: true, where: {username}});\n    //if have => check password\n    user ? !bcrypt.compareSync(password, user.password) ? res.fail('Wrong Password', 400) : {} : res.fail('Username is not found.', 400);\n    //if authenticate true\n    const payload = {id: user.id, role: user.role, username};\n\n    return user.role === 'admin' ? res.success({...user, password: undefined, token: getToken(payload)}) : res.success({...user, password: undefined});\n\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n//external function used for verify if user passed the jwt first step before push to access token\nexport const verifyUser = async (data, res) => {\n  try{\n    const user = await User.findOne({where: {...data}});\n    return user ? user : res.fail('Not user');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}