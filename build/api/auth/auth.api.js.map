{"version":3,"sources":["../../../src/api/auth/auth.api.js"],"names":["SALT","process","env","registerAuth","req","res","username","password","body","hash","bcrypt","hashSync","user","User","findOrCreate","where","defaults","success","error","fail","loginAuth","findOne","compareSync"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAM,EAACA,IAAD,KAASC,QAAQC,GAAvB;;AAEO,MAAMC,sCAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,MAAG;AACD,UAAM,EAACC,QAAD,EAAWC,QAAX,KAAuBH,IAAII,IAAjC;AACA;AACA,UAAMC,OAAOC,iBAAOC,QAAP,CAAgBJ,QAAhB,EAA0B,CAACP,IAA3B,CAAb;AACAI,QAAII,IAAJ,CAASD,QAAT,GAAoBE,IAApB;AACA;AACA,UAAM,CAACG,IAAD,IAAS,MAAMC,eAAKC,YAAL,CAAkB,EAACC,OAAO,EAACT,QAAD,EAAR,EAAoBU,UAAUZ,IAAII,IAAlC,EAAlB,CAArB;AACA;AACAI,SAAKL,QAAL,GAAgBA,QAAhB;AACA;AACAF,QAAIY,OAAJ,CAAYL,IAAZ;AACD,GAXD,CAWE,OAAMM,KAAN,EAAY;AACZb,QAAIc,IAAJ,CAASD,KAAT;AACD;AACF,CAfM;;AAiBA,MAAME,gCAAY,OAAOhB,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,MAAG;AACD,UAAM,EAACC,QAAD,EAAWC,QAAX,KAAuBH,IAAII,IAAjC;AACA;AACA,UAAMI,OAAO,MAAMC,eAAKQ,OAAL,CAAa,EAACN,OAAO,EAACT,QAAD,EAAR,EAAb,CAAnB;AACA;AACAM,WAAO,CAACF,iBAAOY,WAAP,CAAmBf,QAAnB,EAA6BK,KAAKL,QAAlC,CAAD,GAA+CF,IAAIc,IAAJ,CAAS,gBAAT,EAA2B,GAA3B,CAA/C,GAAiF,EAAxF,GAA6Fd,IAAIc,IAAJ,CAAS,wBAAT,EAAmC,GAAnC,CAA7F;AACAP,SAAKL,QAAL,GAAgBA,QAAhB;AACAF,QAAIY,OAAJ,CAAYL,IAAZ;AACD,GARD,CAQE,OAAMM,KAAN,EAAY;AACZb,QAAIc,IAAJ,CAASD,KAAT;AACD;AACF,CAZM","file":"auth.api.js","sourcesContent":["import User from '../../models/user';\nimport bcrypt from 'bcrypt';\n\nconst {SALT} = process.env;\n\nexport const registerAuth = async (req, res) => {\n  try{\n    const {username, password} = req.body;\n    //encrypt and save\n    const hash = bcrypt.hashSync(password, +SALT);\n    req.body.password = hash;\n    //\n    const [user] = await User.findOrCreate({where: {username}, defaults: req.body});\n    //decrypt and return\n    user.password = password;\n    //will include token\n    res.success(user);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const loginAuth = async (req, res) => {\n  try{\n    const {username, password} = req.body;\n    //find by name\n    const user = await User.findOne({where: {username}});\n    //if have => check password\n    user ? !bcrypt.compareSync(password, user.password) ? res.fail('Wrong Password', 400) : {} : res.fail('Username is not found.', 400);\n    user.password = password;\n    res.success(user);\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}