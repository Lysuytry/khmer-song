{"version":3,"sources":["../../../src/api/auth/auth.api.js"],"names":["SALT","process","env","registerAuth","req","res","username","password","body","hash","bcrypt","hashSync","user1","User","findOrCreate","where","defaults","payload","id","role","user","JSON","parse","data","undefined","token","success","error","fail","message","loginAuth","findOne","raw","compareSync","verifyUser"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAM,EAACA,IAAD,KAASC,QAAQC,GAAvB;;AAEO,MAAMC,sCAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,MAAG;AACD,UAAM,EAACC,QAAD,EAAWC,QAAX,KAAuBH,IAAII,IAAjC;AACA;AACA,UAAMC,OAAOC,iBAAOC,QAAP,CAAgBJ,QAAhB,EAA0B,CAACP,IAA3B,CAAb;AACAI,QAAII,IAAJ,CAASD,QAAT,GAAoBE,IAApB;AACA;AACA,UAAM,CAACG,KAAD,IAAU,MAAMC,eAAKC,YAAL,CAAkB,EAACC,OAAO,EAACT,QAAD,EAAR,EAAoBU,UAAUZ,IAAII,IAAlC,EAAlB,CAAtB;AACA,UAAMS,UAAU,EAACC,IAAIN,MAAMM,EAAX,EAAeC,MAAMP,MAAMO,IAA3B,EAAiCb,QAAjC,EAAhB;AACA,UAAMc,OAAOC,KAAKC,KAAL,CAAW,iCAAUV,KAAV,CAAX,CAAb;AACA,UAAMW,oBAAWH,IAAX,IAAkBb,UAAUiB,SAA5B,EAAuCC,OAAO,mBAASR,OAAT,CAA9C,GAAN;AACAZ,QAAIqB,OAAJ,CAAYH,IAAZ;AACD,GAXD,CAWE,OAAMI,KAAN,EAAY;AACZtB,QAAIuB,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CAfM;;AAiBA,MAAMC,gCAAY,OAAO1B,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,MAAG;AACD,UAAM,EAACC,QAAD,EAAWC,QAAX,KAAuBH,IAAII,IAAjC;AACA;AACA,UAAMY,OAAO,MAAMP,eAAKkB,OAAL,CAAa,EAACC,KAAK,IAAN,EAAYjB,OAAO,EAACT,QAAD,EAAnB,EAAb,CAAnB;AACA;AACAc,WAAO,CAACV,iBAAOuB,WAAP,CAAmB1B,QAAnB,EAA6Ba,KAAKb,QAAlC,CAAD,GAA+CF,IAAIuB,IAAJ,CAAS,gBAAT,EAA2B,GAA3B,CAA/C,GAAiF,EAAxF,GAA6FvB,IAAIuB,IAAJ,CAAS,wBAAT,EAAmC,GAAnC,CAA7F;AACA;AACA,UAAMX,UAAU,EAACC,IAAIE,KAAKF,EAAV,EAAcC,MAAMC,KAAKD,IAAzB,EAA+Bb,QAA/B,EAAhB;AACAD,QAAIqB,OAAJ,cAAgBN,IAAhB,IAAsBb,UAAUiB,SAAhC,EAA2CC,OAAO,mBAASR,OAAT,CAAlD;AACD,GATD,CASE,OAAMU,KAAN,EAAY;AACZtB,QAAIuB,IAAJ,CAASD,KAAT;AACD;AACF,CAbM;;AAeP;AACO,MAAMO,kCAAa,OAAOX,IAAP,EAAalB,GAAb,KAAqB;AAC7C,MAAG;AACD,UAAMe,OAAO,MAAMP,eAAKkB,OAAL,CAAa,EAAChB,oBAAWQ,IAAX,CAAD,EAAb,CAAnB;AACA,WAAOH,OAAOA,IAAP,GAAcf,IAAIuB,IAAJ,CAAS,UAAT,CAArB;AACD,GAHD,CAGE,OAAMD,KAAN,EAAY;AACZtB,QAAIuB,IAAJ,CAASD,KAAT;AACD;AACF,CAPM","file":"auth.api.js","sourcesContent":["import User from '../../models/user';\nimport bcrypt from 'bcrypt';\nimport {getToken} from '../../common/jwt';\nimport stringify from 'json-stringify-safe';\n\nconst {SALT} = process.env;\n\nexport const registerAuth = async (req, res) => {\n  try{\n    const {username, password} = req.body;\n    //encrypt and save\n    const hash = bcrypt.hashSync(password, +SALT);\n    req.body.password = hash;\n    //\n    const [user1] = await User.findOrCreate({where: {username}, defaults: req.body});\n    const payload = {id: user1.id, role: user1.role, username};\n    const user = JSON.parse(stringify(user1));\n    const data = {...user , password: undefined, token: getToken(payload)};\n    res.success(data);\n  } catch(error){\n    res.fail(error.message);\n  }\n};\n\nexport const loginAuth = async (req, res) => {\n  try{\n    const {username, password} = req.body;\n    //find by name\n    const user = await User.findOne({raw: true, where: {username}});\n    //if have => check password\n    user ? !bcrypt.compareSync(password, user.password) ? res.fail('Wrong Password', 400) : {} : res.fail('Username is not found.', 400);\n    //if authenticate true\n    const payload = {id: user.id, role: user.role, username};\n    res.success({...user, password: undefined, token: getToken(payload)});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\n//external function used for verify if user passed the jwt first step before push to access token\nexport const verifyUser = async (data, res) => {\n  try{\n    const user = await User.findOne({where: {...data}});\n    return user ? user : res.fail('Not user');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}