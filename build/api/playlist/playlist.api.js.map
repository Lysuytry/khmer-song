{"version":3,"sources":["../../../src/api/playlist/playlist.api.js"],"names":["getPlaylist","req","res","id","params","limit","offset","name","query","fliterName","Op","like","conditions","userId","rows","count","Playlist","findAndCountAll","where","success","error","fail","createPlaylist","body","user","User","findById","playlist","findOrCreate","defaults","deletePlaylist","result","destroy"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEO,MAAMA,oCAAc,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAG;AACD,UAAM,EAACC,EAAD,KAAOF,IAAIG,MAAjB;AACA,UAAM,EAACC,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,KAAwBN,IAAIO,KAAlC;AACA,UAAMC,aAAaF,OAAO,EAACA,MAAM,EAAC,CAACG,wBAAGC,IAAJ,GAAY,IAAGJ,IAAK,GAArB,EAAP,EAAP,GAA4C,EAA/D;AACA,UAAMK,wBAAcC,QAAQV,EAAtB,IAA6BM,UAA7B,CAAN;AACA,UAAM,EAACK,IAAD,EAAOC,KAAP,KAAgB,MAAMC,mBAASC,eAAT,CAAyB,EAACC,OAAON,UAAR,EAAoBN,MAApB,EAA4BD,KAA5B,EAAzB,CAA5B;AACAH,QAAIiB,OAAJ,CAAYL,IAAZ,EAAkB,EAACC,KAAD,EAAQV,KAAR,EAAeC,MAAf,EAAlB;AACD,GAPD,CAOE,OAAMc,KAAN,EAAY;AACZlB,QAAImB,IAAJ,CAASD,KAAT;AACD;AACF,CAXM;;AAaA,MAAME,0CAAiB,OAAOrB,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAG;AACD,UAAM,EAACK,IAAD,EAAOM,MAAP,KAAiBZ,IAAIsB,IAA3B;AACA;AACA,UAAMC,OAAO,MAAMC,eAAKC,QAAL,CAAcb,MAAd,CAAnB;AACA,UAAM,CAACc,QAAD,IAAa,CAACH,IAAD,GAAQtB,IAAImB,IAAJ,CAAS,uBAAT,CAAR,GACjB,MAAML,mBAASY,YAAT,CAAsB,EAACV,OAAO,EAACX,IAAD,EAAR,EAAgBsB,UAAU5B,IAAIsB,IAA9B,EAAtB,CADR;AAEArB,QAAIiB,OAAJ,CAAYQ,QAAZ;AACD,GAPD,CAOE,OAAMP,KAAN,EAAY;AACZlB,QAAImB,IAAJ,CAASD,KAAT;AACD;AACF,CAXM;;AAaA,MAAMU,0CAAiB,OAAO7B,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAG;AACD,UAAM,EAACC,EAAD,KAAOF,IAAIG,MAAjB;AACA,UAAM2B,SAAS,MAAMf,mBAASgB,OAAT,CAAiB,EAACd,OAAO,EAACf,EAAD,EAAR,EAAjB,CAArB;AACA4B,aAAS7B,IAAIiB,OAAJ,CAAY,uBAAZ,CAAT,GAAgDjB,IAAImB,IAAJ,CAAS,kBAAT,CAAhD;AACD,GAJD,CAIE,OAAMD,KAAN,EAAY;AACZlB,QAAImB,IAAJ,CAASD,KAAT;AACD;AACF,CARM","file":"playlist.api.js","sourcesContent":["import Playlist from '../../models/playlist';\nimport User from '../../models/user';\nimport { Op } from '../../common/sequelize-connection';\n\nexport const getPlaylist = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const {limit, offset, name} = req.query;\n    const fliterName = name ? {name: {[Op.like]: `%${name}%` } } : {};\n    const conditions = {userId: id, ...fliterName};\n    const {rows, count} = await Playlist.findAndCountAll({where: conditions, offset, limit});\n    res.success(rows, {count, limit, offset});\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const createPlaylist = async (req, res) => {\n  try{\n    const {name, userId} = req.body;\n    //we must know who created it\n    const user = await User.findById(userId);\n    const [playlist] = !user ? res.fail('User Id is not found.') :\n      await Playlist.findOrCreate({where: {name}, defaults: req.body});\n    res.success(playlist);\n  } catch(error){\n    res.fail(error);\n  }\n};\n\nexport const deletePlaylist = async (req, res) => {\n  try{\n    const {id} = req.params;\n    const result = await Playlist.destroy({where: {id} });\n    result ? res.success('Successfully deleted.') : res.fail('Id is not found.');\n  } catch(error){\n    res.fail(error);\n  }\n};\n"]}