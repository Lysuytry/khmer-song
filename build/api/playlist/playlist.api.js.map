{"version":3,"sources":["../../../src/api/playlist/playlist.api.js"],"names":["getPlaylist","req","res","userId","body","limit","offset","name","query","filterName","Op","like","conditions","rows","count","Playlist","findAndCountAll","where","success","error","fail","createPlaylist","authUer","id","user","User","findById","playlist","findOrCreate","defaults","deletePlaylist","transaction","sequelize","params","Promise","all","destroy","PlaylistSong","playlistId","commit","rollback","message","getSongFromPlaylist","songs","removeSongFromPlaylist","songId","findOne","attributes","row","addSongToPlaylist","status","song","Song","isNewRecord","raw"],"mappings":"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","file":"playlist.api.js","sourcesContent":["import Playlist, {getSongByPlaylistId} from '../../models/playlist';\nimport User from '../../models/user';\nimport Song from '../../models/song';\nimport PlaylistSong from '../../models/playlist-song';\nimport { Op, sequelize } from '../../common/sequelize-connection';\n\nexport const getPlaylist = async (req, res) => {\n  try {\n    const { userId } = req.body;\n    const { limit, offset, name } = req.query;\n    const filterName = name ? { name: { [Op.like]: `%${name}%` } } : {};\n    const conditions = { userId, ...filterName };\n    const { rows, count } = await Playlist.findAndCountAll({ where: conditions, offset, limit });\n    res.success(rows, { count, limit, offset });\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const createPlaylist = async (req, res) => {\n  try {\n    const { name } = req.body;\n    const userId = req.authUer.id;\n    //we must know who created it\n    const user = await User.findById(userId);\n    const [playlist] = !user\n      ? res.fail('User Id is not found.')\n      : await Playlist.findOrCreate({ where: { name, userId }, defaults: req.body });\n    res.success(playlist);\n  } catch (error) {\n    res.fail(error);\n  }\n};\n\nexport const deletePlaylist = async (req, res) => {\n  const transaction = await sequelize.transaction();\n  try {\n    const { id } = req.params;\n    const userId = req.authUer.id;\n    await Promise.all([\n      Playlist.destroy({ where: { id, userId }, transaction }),\n      PlaylistSong.destroy({ where: { playlistId: id }, transaction })\n    ]);\n    transaction.commit();\n    res.success('Successfully deleted.');\n  } catch (error) {\n    transaction.rollback();\n    res.fail(error.message);\n  }\n};\n\nexport const getSongFromPlaylist = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.authUer.id;\n    const { limit, offset } = req.query;\n    const {songs,count} = await getSongByPlaylistId({id, userId, limit, offset});\n    res.success(songs, {count, limit, offset});\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const removeSongFromPlaylist = async (req, res) => {\n  try {\n    const { id, songId } = req.params;\n    const userId = req.authUer.id;\n    //check playlist Id is existing\n    //count >findOne\n    const playlist = await Playlist.findOne({ attributes: ['id'], where: { userId, id } });\n    //not => invalid playlist\n    if (!playlist) res.fail('Playlist Id is not valid.');\n    //success => check song id in playlistsong\n    const row = await PlaylistSong.destroy({ where: { playlistId: id, songId: songId } });\n    //if no check songId again\n    if (!row) return res.fail('Song Id is invalid.');\n    res.success('Successfully deletd.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const addSongToPlaylist = async (req, res) => {\n  try {\n    const { status } = req.query;\n    const { id, songId } = req.params;\n    const userId = req.authUer.id;\n    //check if song if existing\n    const [song, playlist] = await Promise.all([\n      Song.findOne({ attributes: ['id'], where: { id: songId, status } }),\n      Playlist.findOne({ attributes: ['id'], where: { userId, id } })\n    ]);\n    //if not => return songId is not found\n    if (!song) return res.fail('Song is invalid.');\n    if (!playlist) return res.fail('Playlist is invalid.');\n    //existing => add to table playlistsong\n    const [{ isNewRecord }] = await PlaylistSong.findOrCreate({\n      raw: true,\n      where: { playlistId: id, songId },\n      defaults: { playlistId: id, songId }\n    });\n    //result._options.isNewRecord =\n    !isNewRecord\n      ? res.success('Song has already added to playlist.')\n      : res.success('Successfully added song to playlist.');\n  } catch (error) {\n    res.fail(error.name);\n  }\n};\n"]}