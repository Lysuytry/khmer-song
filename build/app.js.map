{"version":3,"sources":["../src/app.js"],"names":["app","ENDPOINT","process","env","use","body","json","urlencoded","extended","req","res","next","success","data","options","code","status","message","fail","console","log","routeAuth","checkToken","admin","checkTokenForGuest","routeRoom","routeSong","routeUser","routeArtist","routePlaylist","routeProduction"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;AAEA,MAAMA,MAAM,wBAAZ;AAHA;;;AAKA,MAAM,EAACC,QAAD,KAAaC,QAAQC,GAA3B;;AAEAH,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAJ,IAAII,GAAJ,CAAQC,qBAAKC,IAAL,EAAR;AACAN,IAAII,GAAJ,CAAQC,qBAAKE,UAAL,CAAgB,EAAEC,UAAU,KAAZ,EAAhB,CAAR;;AAEAR,IAAII,GAAJ,CAAQ,CAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B;AACA,0BAAYF,GAAZ;AACA;AACAC,MAAIE,OAAJ,GAAc,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAO,GAAvB,KAA+B;AAC3C,WAAO,OAAOF,IAAP,KAAgB,QAAhB,GAA2BC,UAAUJ,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsB,EAACO,IAAD,EAAOC,OAAP,EAAtB,CAAV,GAAmDJ,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsBO,IAAtB,CAA9E,GAA4GH,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsB,EAACW,SAASJ,IAAV,EAAtB,CAAnH;AACD,GAFD;AAGA;AACAH,MAAIQ,IAAJ,GAAW,CAACD,OAAD,EAAUF,OAAO,GAAjB,KAAyB;AAClCI,YAAQC,GAAR,CAAYH,OAAZ;AACA,WAAOP,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsB,EAACW,OAAD,EAAtB,CAAP;AACD,GAHD;AAIA;AACAN;AACD,CAdD;;AAgBAX,IAAII,GAAJ,CAAS,GAAEH,QAAS,GAApB,EAAwBoB,cAAxB;AACArB,IAAII,GAAJ,CAAS,GAAEH,QAAS,QAApB,EAA6BqB,kBAA7B,EAAyCC,eAAzC;AACAvB,IAAII,GAAJ,CAAS,GAAEH,QAAS,QAApB,EAA6BuB,0BAA7B,EAAiDC,cAAjD;AACAzB,IAAII,GAAJ,CAAS,GAAEH,QAAS,QAApB,EAA6ByB,cAA7B;AACA1B,IAAII,GAAJ,CAAS,GAAEH,QAAS,QAApB,EAA6BuB,0BAA7B,EAAiDG,cAAjD;AACA3B,IAAII,GAAJ,CAAS,GAAEH,QAAS,UAApB,EAA+B2B,gBAA/B;AACA5B,IAAII,GAAJ,CAAS,GAAEH,QAAS,WAApB,EAAgCuB,0BAAhC,EAAoDK,kBAApD;AACA7B,IAAII,GAAJ,CAAS,GAAEH,QAAS,cAApB,EAAmC6B,oBAAnC;;kBAEe9B,G","file":"app.js","sourcesContent":["import body from 'body-parser';\nimport 'dotenv/config';\nimport express from 'express';\nimport logger from 'morgan';\n\nimport admin from './api/admin/admin';\nimport routeArtist from './api/artist/artist.route';\nimport routeAuth from './api/auth/auth.route';\nimport routeProduction from './api/production/production.route';\nimport routePlaylist from './api/playlist/playlist.route';\nimport routeSong from './api/song/song.route';\nimport routeUser from './api/user/user.route';\nimport routeRoom from './api/room/room.route';\n\nimport { filterQuery } from './common/query';\n//checkfunction is from admin middleware to check token user admin\nimport {checkToken, checkTokenForGuest} from './api/admin/admin.middleware';\n\nconst app = express();\n\nconst {ENDPOINT} = process.env;\n\napp.use(logger('dev'));\napp.use(body.json());\napp.use(body.urlencoded({ extended: false}));\n\napp.use((req, res, next) => {\n  //bind query\n  filterQuery(req);\n  //for response success\n  res.success = (data, options, code = 200) => {\n    return typeof data === 'object' ? options ? res.status(code).json({data, options}) : res.status(code).json(data) : res.status(code).json({message: data});\n  };\n  //for response error\n  res.fail = (message, code = 500) => {\n    console.log(message);\n    return res.status(code).json({message});\n  };\n  //parse to next\n  next();\n});\n\napp.use(`${ENDPOINT}/`, routeAuth);\napp.use(`${ENDPOINT}/admin`, checkToken, admin);\napp.use(`${ENDPOINT}/rooms`, checkTokenForGuest, routeRoom);\napp.use(`${ENDPOINT}/songs`, routeSong);\napp.use(`${ENDPOINT}/users`, checkTokenForGuest, routeUser);\napp.use(`${ENDPOINT}/artists`, routeArtist);\napp.use(`${ENDPOINT}/playlist`, checkTokenForGuest, routePlaylist);\napp.use(`${ENDPOINT}/productions`, routeProduction);\n\nexport default app;\n"]}